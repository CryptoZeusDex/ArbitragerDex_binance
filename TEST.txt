contract DecompiledContract {
    // Deobfuscation score: 6 [EXPERIMENTAL]
    function start() {
        uint256* ptr0, ptr1, ptr2;

        *0x40 = 0x80;
        ptr1 = v0.length;
        if((uint256)ptr1 >= 0x4) {
            if(msg.sig == 598122101) {
                sub_BC();
            }
            switch(ptr0) {
                case 1029577355: {
                    sub_A1();
                    break;
                }
                case 3806044490: {
                    sub_8F();
                    break;
                }
                case 2717803338: {
                    sub_98();
                    break;
                }
                case 709284576: {
                    sub_B3();
                    break;
                }
                case 752306381: {
                    sub_AA();
                }
            }
        }

        ptr2 = v0.length;
        if(ptr2 != 0x0) {
            if(!msg.value) {
                sub_BA8();
                return((int256*)(ptr0 + 1), *ptr0);
            }
            revert(0x0, 0x0);
        }

        stop();
    }

    function sub_BC() public payable {
        sub_128();
    }

    function sub_B3() public payable {
        void* ptr0;
        uint256 v0, v1, v2, v3, v4;
        void* ptr1 = (void*)msg.value;
        uint256 v5 = 0x29;
        int256* ptr2 = &v3;

        if(!msg.value) {
            v2 = v10.length;
            uint256 v6 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC;
            ptr1 = (void*)(v2 - 0x4 < 0x40);
            v5 = 0x29;
            ptr2 = &v3;
            if(!ptr1) {
                ptr0 = calldataload(0x4);
                ptr1 = ptr0;
                v2 = calldataload(0x24);
                v5 = v2;
                uint256 v7 = 0x40;
                v6 = (uint256)(v5 > 0xFFFFFFFFFFFFFFFF);
                uint256 v8 = 0x29;
                ptr2 = &v5;
                if(!v6) {
                    v0 = v10.length;
                    /*BAD_CALL!*/ sub_24B(v5 + 0x4, v0);
                    v1 = calldataload(v4);
                    sub_FE4();
                    return;
                }
            }
        }

        --ptr2;
        *ptr2 = 0x0;
        --ptr2;
        *ptr2 = 0x0;
        ++ptr2;
        uint256 v9 = *ptr2;
        ++ptr2;
        revert(0x0, v9);
    }

    function sub_AA() public payable {
        uint256 v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17;
        int256* ptr0;
        uint256 v18, v19, v20;
        int256* ptr1;
        uint256 v21, v22, v23, v24, v25, v26;
        address v27;
        uint256 v28, v29;
        address v30, v31;
        uint256 v32, v33, v34;
        uint256 v35 = (uint256)msg.value;
        uint256 v36 = 0x29, v37 = v35;
        uint256* ptr2 = &v18;

        if(!v37) {
            v35 = 0x20;
            v31 = v316.length;
            address v38 = v31, v39 = v31;
            v36 = (uint256)(v39 - 0x4 < 0x20);
            uint256 v40 = 0x29, v41 = v36;
            ptr2 = &v35;
            if(!v41) {
                v36 = 0x20;
                v35 = 0x4;
                v31 = calldataload(0x4);
                v40 = (uint256)v31;
                uint256 v42 = 0x40, v43 = 0x10000000000000000, v44 = v40;
                v38 = (address)(v44 > 0xFFFFFFFFFFFFFFFF);
                uint256 v45 = 0x29;
                address v46 = v38;
                ptr2 = &v40;
                if(!v46) {
                    v9 = v316.length;
                    uint256 v47 = v9, v48 = 0x4, v49 = 0x4;
                    v45 = v40 + 0x4;
                    /*BAD_CALL!*/ sub_C5(v45, v47);
                    uint256 v50 = 0x10000000000000000000000000000000000000000, v51 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
                    v35 = v32;
                    v32 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
                    uint256 v52 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, v53 = 0xA7F4E25B8B4D117A98C854882036D49C01B37DFE, v54 = 0xA7F4E25B8B4D117A98C854882036D49C01B37DFE;
                    v31 = v315;
                    address v55 = v31;
                    uint256 v56 = v55 - 0xA7F4E25B8B4D117A98C854882036D49C01B37DFE;
                    if(v56) {
                        v40 = *0x40;
                        *(uint256*)v40 = 0x8C379A000000000000000000000000000000000000000000000000000000000;
                        *(uint256*)(v40 + v20) = v35;
                        *(int256*)(v40 + 0x24) = 0x10;
                        *(int256*)(v40 + 0x44) = 0x4E6F7420506C7573312077616C6C657400000000000000000000000000000000;
                        ptr2 = &v36;
                        revert(v40, 0x64);
                        goto loc_830;
                    }
                    else {
                        uint256 v57 = v18, v58 = v18;
                        /*BAD_CALL!*/ sub_B73(v58, v57);
                        uint256 v59 = v35;
                        v35 = v19;
                        v19 = v59;
                        uint256 v60 = v35, v61 = v18;
                        v35 = v33;
                        v33 = v61;
                        uint256 v62 = v20, v63 = v34, v64 = v34;
                        v23 = calldataload(v62 + v64);
                        v40 = 0x40;
                        uint256 v65 = 0x40, v66 = v34, v67 = v34;
                        v24 = calldataload(v67 + 0x40);
                        uint256 v68 = v24;
                        v45 = v34;
                        v34 = v68;
                        uint256 v69 = v45;
                        v10 = calldataload(v69 + 0x60);
                        uint256 v70 = v10;
                        v18 = v10;
                        uint256 v71 = v20, v72 = v33;
                        v11 = calldataload(v72);
                        uint256 v73 = v33, v74 = v33;
                        uint256 v75 = v11 + v74;
                        v12 = calldataload(v71 + v75);
                        uint256 v76 = v12;
                        v38 = (address)(v60 & v76);
                        uint256 v77 = v18;
                        uint256 v78 = (uint256)(v77 != 0x0);
                        v45 = v23;
                        v36 = v78;
                        v7 = 0x7E4;
                        uint256 v79 = v78;
                        if(!v79) {
                            goto loc_4E8;
                        }
                        else {
                            v42 = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                            v31 = extcodesize(0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C);
                            v7 = (uint256)(v31 == 0x0);
                            v6 = 0x29;
                            v5 = v7;
                            ptr2 = &v42;
                        }
                    }
                    if(!v5) {
                        v7 = 0x0;
                        uint256 v80 = 0x40;
                        v6 = *(uint256*)0x40;
                        uint256 v81 = *(uint256*)0x40;
                        uint256 v82 = *(uint256*)0x40;
                        uint256 v83 = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                        v42 = v82;
                        uint256 v84 = v6, v85 = v6, v86 = 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000;
                        *(uint256*)v85 = 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000;
                        uint256 v87 = v6, v88 = v6, v89 = v7, v90 = v7, v91 = v88;
                        address v92 = (address)v88;
                        uint256 v93 = v18, v94 = v35;
                        address v95 = v92, v96 = v92;
                        uint256* ptr3 = (uint256*)(v94 + v96);
                        uint256 v97 = 0x824, v98 = v93, v99 = 0x824;
                        uint256* ptr4 = ptr3, ptr5 = ptr3, ptr6 = ptr3;
                        int256* ptr7 = (int256*)(ptr6 + 1);
                        uint256* ptr8 = ptr3;
                        int256* ptr9 = ptr7;
                        uint256* ptr10 = ptr8;
                        *ptr10 = v98;
                        int256* ptr11 = ptr9;
                        int256* ptr12 = (int256*)((int256)ptr11 - v92);
                        v92 = (address)v83;
                        ptr1 = gasleft();
                        ptr9 = ptr1;
                        int256* ptr13 = ptr1;
                        address v100 = v92;
                        uint256 v101 = v90, v102 = v88;
                        int256* ptr14 = ptr12;
                        uint256 v103 = v7;
                        v21 = call(ptr13, v100, v101, v102, ptr14, v6, v103);
                        v7 = v21;
                        uint256 v104 = v21;
                        v83 = 0x853;
                        uint256 v105 = (uint256)(v104 == 0x0);
                        if(v105) {
                            v83 = 0xC89;
                            sub_C89();
                        }
                    loc_830:
                        v6 = 0x83A;
                        uint256 v106 = v7;
                        if(v106) {
                            uint256 v107 = v42;
                            v7 = v42;
                            v83 = v42;
                            v42 = 0x84D;
                            v88 = 0xC07;
                            /*BAD_CALL!*/ sub_C07(v83);
                            uint256 v108 = v7;
                            v83 = 0xC7E;
                            /*BAD_CALL!*/ sub_C7E(v108, v7);
                            v22 = codesize();
                            v7 = 0x834;
                        }
                    loc_4E8:
                        uint256 v109 = v40;
                        v42 = *(uint256*)v109;
                        v7 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
                        uint256 v110 = 0x70A0823100000000000000000000000000000000000000000000000000000000, v111 = v42, v112 = v42;
                        *(uint256*)v112 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
                        v30 = v314;
                        uint256 v113 = v35, v114 = v42, v115 = v42;
                        uint256 v116 = v113 + v115;
                        v6 = v113 + v115;
                        uint256 v117 = v113 + v115;
                        uint256 v118 = v113 + v115;
                        address v119 = v30;
                        *(address*)v118 = v30;
                        uint256 v120 = v6, v121 = v42, v122 = v33;
                        v6 = v7;
                        v7 = v122;
                        uint256 v123 = v6;
                        v42 = v6;
                        uint256 v124 = v20, v125 = v20, v126 = v121, v127 = v121, v128 = v121, v129 = v121;
                        uint256 v130 = v120 + 0x20;
                        uint256 v131 = v127;
                        v90 = v127;
                        address v132 = v38;
                        v92 = v38;
                        ptr0 = gasleft();
                        ptr9 = ptr0;
                        int256* ptr15 = ptr0;
                        address v133 = v92;
                        v29 = staticcall(ptr15, v133, v90, v130 - v129, v127, v125);
                        uint256 v134 = v29;
                        v6 = v121;
                        v33 = v134;
                        uint256 v135 = v134;
                        uint256 v136 = (uint256)(v135 == 0x0);
                        if(v136) {
                            sub_C89();
                        }
                        v83 = v33;
                        v33 = 0x0;
                        v88 = 0x7B0;
                        ptr2 = &v6;
                        if(!v83) {
                            goto loc_51E;
                        }
                        else {
                            v83 = (uint256)v38;
                            v38 = (address)v36;
                            uint256 v137 = v83;
                            v83 = v45;
                            v45 = v137;
                            uint256 v138 = v83;
                            v83 = v42;
                            v42 = v138;
                            uint256 v139 = v83;
                            v83 = v7;
                            v7 = v139;
                            v33 = v83;
                            v83 = v6;
                            v6 = 0x7CD;
                            v88 = v20;
                            v8 = returndatasize();
                            v90 = (uint256)(v8 < v20);
                            v92 = 0x77A;
                            ptr2 = &v88;
                            if(v90) {
                                v31 = returndatasize();
                                *ptr2 = v31;
                                --ptr2;
                                *ptr2 = 0x762;
                                ++ptr2;
                                goto loc_763;
                            }
                            else {
                                v99 = 0xC5D;
                                /*BAD_CALL!*/ sub_C5D(v83, v88);
                                uint256 v140 = v88;
                                v88 = v34;
                                v34 = v140;
                                uint256 v141 = v88;
                                v88 = v83;
                                v83 = v141;
                                v6 = v88;
                                v88 = v7;
                                v7 = 0x7CD;
                                uint256 v142 = v88;
                                v88 = v42;
                                v42 = v142;
                                v90 = 0x51D;
                                ptr2 = &v88;
                                goto loc_51E;
                            }
                        }
                    }
                }
            }
        }

    loc_2A:
        --ptr2;
        *ptr2 = 0x0;
        --ptr2;
        *ptr2 = 0x0;
        ++ptr2;
        uint256 v143 = *ptr2;
        ++ptr2;
        revert(0x0, v143);
    loc_51E:
        ++ptr2;
        uint256 v144 = *ptr2;
        *ptr2 = *(int256*)(ptr2 + 1);
        *(int256*)(ptr2 + 1) = v144;
        uint256 v145 = *(int256*)(ptr2 + &loc_5);
        --ptr2;
        *ptr2 = v145;
        uint256 v146 = *ptr2;
        *ptr2 = *(int256*)(ptr2 + &loc_4);
        *(int256*)(ptr2 + &loc_4) = v146;
        uint256 v147 = *ptr2;
        *ptr2 = *(int256*)(ptr2 + 3);
        *(int256*)(ptr2 + 3) = v147;
        uint256 v148 = *ptr2;
        *ptr2 = *(int256*)(ptr2 + &loc_2);
        *(int256*)(ptr2 + &loc_2) = v148;
        uint256 v149 = *(int256*)(ptr2 + &loc_D);
        --ptr2;
        *ptr2 = v149;
        --ptr2;
        *ptr2 = 0x0;
        *ptr2 = *(int256*)(ptr2 + &loc_E);
        *(int256*)(ptr2 + &loc_E) = 0x0;
        --ptr2;
        *ptr2 = 0x0;
        *ptr2 = *(int256*)(ptr2 + &loc_E);
        *(int256*)(ptr2 + &loc_E) = 0x0;
        --ptr2;
        *ptr2 = 0x0;
        --ptr2;
        *ptr2 = 0x79F;
        ++ptr2;
        uint256 v150 = *ptr2;
        ++ptr2;
        if(v150) {
            --ptr2;
            *ptr2 = 0x7AB;
            uint256 v151 = *(int256*)(ptr2 + 3);
            --ptr2;
            *ptr2 = v151;
            --ptr2;
            *ptr2 = 0x382;
            --ptr2;
            *ptr2 = 0xCFB;
            ++ptr2;
            /*BAD_CALL!*/ sub_CFB();
            --ptr2;
            *ptr2 = 0x54E;
            ++ptr2;
        }

        uint256 v152 = *ptr2;
        --ptr2;
        uint256 v153 = *(int256*)(ptr2 + 3);
        --ptr2;
        *ptr2 = v153;
        uint256 v154 = *ptr2;
        ++ptr2;
        *ptr2 = (uint256)(*ptr2 > v154);
        --ptr2;
        *ptr2 = 0x78E;
        ++ptr2;
        uint256 v155 = *ptr2;
        ++ptr2;
        if(!v155) {
            *ptr2 = 0x55F;
            *ptr2 = *(int256*)(ptr2 + 3);
            *(int256*)(ptr2 + 3) = 0x55F;
            --ptr2;
            *ptr2 = 0x189F;
            ++ptr2;
            *(ptr2 + 3) = /*BAD_CALL!*/ sub_189F(*ptr2, *(ptr2 + 1), *(ptr2 + &loc_2));
            uint256 v156 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 6);
            *(int256*)(ptr2 + 6) = v156;
        }
        else {
            uint256 v157 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + &loc_2);
            *(int256*)(ptr2 + &loc_2) = v157;
            uint256 v158 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v158;
            --ptr2;
            *ptr2 = 0x799;
            *ptr2 = *(int256*)(ptr2 + &loc_4);
            *(int256*)(ptr2 + &loc_4) = 0x799;
            --ptr2;
            *ptr2 = 0x322C;
            ++ptr2;
            *(ptr2 + &loc_4) = /*BAD_CALL!*/ sub_322C(*ptr2, *(ptr2 + 1), *(ptr2 + &loc_2), *(ptr2 + 3));
            uint256 v159 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 6);
            *(int256*)(ptr2 + 6) = v159;
            --ptr2;
            *ptr2 = 0x561;
            ++ptr2;
        }

        --ptr2;
        *ptr2 = 0x715;
        ++ptr2;
        uint256 v160 = *ptr2;
        ++ptr2;
        if(!v160) {
        loc_567:
            ++ptr2;
            uint256 v161 = *ptr2;
            --ptr2;
            --ptr2;
            *ptr2 = 0x6FB;
            ++ptr2;
            uint256 v162 = *ptr2;
            ++ptr2;
            if(v162) {
                --ptr2;
                *ptr2 = 0x708;
                --ptr2;
                *ptr2 = 0x70F;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = 0x70F;
                uint256 v163 = *(int256*)(ptr2 + &loc_D);
                --ptr2;
                *ptr2 = v163;
                --ptr2;
                *ptr2 = 0xD61;
                ++ptr2;
                *(ptr2 + &loc_2) = /*BAD_CALL!*/ sub_D61(*ptr2, *(ptr2 + 1));
                uint256 v164 = *(int256*)(ptr2 + &loc_5);
                --ptr2;
                *ptr2 = v164;
                uint256 v165 = *ptr2;
                ++ptr2;
                *ptr2 = (uint256)(*ptr2 < v165);
                --ptr2;
                *ptr2 = 0xD6E;
                ++ptr2;
                /*BAD_CALL!*/ sub_D6E(*ptr2);
                v17 = codesize();
                --ptr2;
                *ptr2 = v17;
                --ptr2;
                *ptr2 = 0x56D;
                ++ptr2;
            }
            ++ptr2;
            uint256 v166 = *(int256*)(ptr2 + 3);
            --ptr2;
            *ptr2 = v166;
            uint256 v167 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + &loc_A);
            *(int256*)(ptr2 + &loc_A) = v167;
            --ptr2;
            *ptr2 = 0x6AF;
            ++ptr2;
            uint256 v168 = *ptr2;
            ++ptr2;
            if(v168) {
                uint256 v169 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v169;
                uint256 v170 = *ptr2;
                --ptr2;
                --ptr2;
                *ptr2 = 0x6DE;
                ++ptr2;
                uint256 v171 = *ptr2;
                ++ptr2;
                if(v171) {
                    *ptr2 = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                    uint256 v172 = *(int256*)(ptr2 + 1);
                    --ptr2;
                    *ptr2 = v172;
                    uint256 v173 = *ptr2;
                    ++ptr2;
                    *ptr2 = (uint256)(*ptr2 == v173);
                    --ptr2;
                    *ptr2 = 0x6B6;
                    ++ptr2;
                }
                --ptr2;
                *ptr2 = 0x6CC;
                ++ptr2;
                uint256 v174 = *ptr2;
                ++ptr2;
                if(v174) {
                    uint256 v175 = *ptr2;
                    *ptr2 = *(int256*)(ptr2 + &loc_9);
                    *(int256*)(ptr2 + &loc_9) = v175;
                    *ptr2 = 0x6D8;
                    uint256 v176 = *(int256*)(ptr2 + &loc_5);
                    --ptr2;
                    *ptr2 = v176;
                    uint256 v177 = *(int256*)(ptr2 + &loc_4);
                    --ptr2;
                    *ptr2 = v177;
                    --ptr2;
                    *ptr2 = 0xDAF;
                    ++ptr2;
                    *(ptr2 + &loc_2) = /*BAD_CALL!*/ sub_DAF(*ptr2, *(ptr2 + 1));
                    uint256 v178 = *ptr2;
                    *ptr2 = *(int256*)(ptr2 + &loc_9);
                    *(int256*)(ptr2 + &loc_9) = v178;
                    --ptr2;
                    *ptr2 = 0x6BB;
                    ++ptr2;
                }
                --ptr2;
                *ptr2 = 0x6C7;
                uint256 v179 = *(int256*)(ptr2 + &loc_A);
                --ptr2;
                *ptr2 = v179;
                --ptr2;
                *ptr2 = 0x382;
                --ptr2;
                *ptr2 = 0xDBC;
                ++ptr2;
                /*BAD_CALL!*/ sub_DBC();
                --ptr2;
                *ptr2 = 0x575;
                ++ptr2;
            }
            uint256 v180 = *(int256*)(ptr2 + &loc_2);
            --ptr2;
            *ptr2 = v180;
            *ptr2 = **ptr2;
            --ptr2;
            *ptr2 = 0xA9059CBB;
            --ptr2;
            *ptr2 = 0xE0;
            ++ptr2;
            *ptr2 = *ptr2 << 0xE0;
            uint256 v181 = *ptr2;
            --ptr2;
            uint256 v182 = *(int256*)(ptr2 + &loc_2);
            --ptr2;
            *ptr2 = v182;
            int256* ptr16 = *ptr2;
            ++ptr2;
            *ptr16 = *ptr2;
            *ptr2 = 0x1;
            --ptr2;
            *ptr2 = 0x1;
            --ptr2;
            *ptr2 = 0xA0;
            ++ptr2;
            *ptr2 = *ptr2 << 0xA0;
            uint256 v183 = *ptr2;
            ++ptr2;
            *ptr2 = v183 - *ptr2;
            uint256 v184 = *(int256*)(ptr2 + &loc_9);
            --ptr2;
            *ptr2 = v184;
            uint256 v185 = *ptr2;
            ++ptr2;
            *ptr2 = *ptr2 & v185;
            uint256 v186 = *(int256*)(ptr2 + &loc_7);
            --ptr2;
            *ptr2 = v186;
            uint256 v187 = *(int256*)(ptr2 + 3);
            --ptr2;
            *ptr2 = v187;
            uint256 v188 = *ptr2;
            ++ptr2;
            *ptr2 = *ptr2 + v188;
            uint256 v189 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v189;
            uint256 v190 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v190;
            int256* ptr17 = *ptr2;
            ++ptr2;
            *ptr17 = *ptr2;
            *ptr2 = 0x20;
            uint256 v191 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v191;
            uint256 v192 = *ptr2;
            ++ptr2;
            *ptr2 = *ptr2 + v192;
            uint256 v193 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + &loc_7);
            *(int256*)(ptr2 + &loc_7) = v193;
            uint256 v194 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v194;
            uint256 v195 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + &loc_7);
            *(int256*)(ptr2 + &loc_7) = v195;
            int256* ptr18 = *ptr2;
            ++ptr2;
            uint256 v196 = *ptr2;
            ++ptr2;
            *ptr18 = v196;
            uint256 v197 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + &loc_5);
            *(int256*)(ptr2 + &loc_5) = v197;
            uint256 v198 = *(int256*)(ptr2 + &loc_9);
            --ptr2;
            *ptr2 = v198;
            uint256 v199 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v199;
            uint256 v200 = *(int256*)(ptr2 + &loc_2);
            --ptr2;
            *ptr2 = v200;
            uint256 v201 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v201;
            uint256 v202 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v202;
            uint256 v203 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v203;
            --ptr2;
            *ptr2 = 0x40;
            ++ptr2;
            *ptr2 = *ptr2 + 0x40;
            uint256 v204 = *ptr2;
            ++ptr2;
            *ptr2 = v204 - *ptr2;
            uint256 v205 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v205;
            --ptr2;
            *ptr2 = 0x0;
            uint256 v206 = *(int256*)(ptr2 + 6);
            --ptr2;
            *ptr2 = v206;
            v14 = gasleft();
            --ptr2;
            *ptr2 = v14;
            uint256 v207 = *ptr2;
            ++ptr2;
            address v208 = *ptr2;
            ++ptr2;
            v3 = *ptr2;
            ++ptr2;
            v2 = *ptr2;
            ++ptr2;
            v1 = *ptr2;
            ++ptr2;
            uint256 v209 = *ptr2;
            ++ptr2;
            v31 = call(v207, v208, v3, v2, v1, v209, *ptr2);
            *ptr2 = v31;
            uint256 v210 = *ptr2;
            --ptr2;
            *ptr2 = (uint256)(*ptr2 == 0x0);
            --ptr2;
            *ptr2 = 0x6A2;
            ++ptr2;
            uint256 v211 = *ptr2;
            ++ptr2;
            if(v211) {
                --ptr2;
                *ptr2 = 0x6AA;
                --ptr2;
                *ptr2 = 0xC89;
                ++ptr2;
                /*BAD_CALL!*/ sub_C89();
                --ptr2;
                *ptr2 = 0x5B2;
                ++ptr2;
            }
            --ptr2;
            *ptr2 = 0x685;
            ++ptr2;
            uint256 v212 = *ptr2;
            ++ptr2;
            if(v212) {
                --ptr2;
                *ptr2 = 0x69B;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = 0x69B;
                uint256 v213 = *(int256*)(ptr2 + &loc_9);
                --ptr2;
                *ptr2 = v213;
                v16 = returndatasize();
                --ptr2;
                *ptr2 = v16;
                uint256 v214 = *(int256*)(ptr2 + 11);
                --ptr2;
                *ptr2 = v214;
                uint256 v215 = *ptr2;
                ++ptr2;
                *ptr2 = (uint256)(*ptr2 < v215);
                --ptr2;
                *ptr2 = 0x1EC;
                ++ptr2;
                uint256 v216 = *ptr2;
                ++ptr2;
                if(v216) {
                    v31 = returndatasize();
                    *ptr2 = v31;
                    --ptr2;
                    *ptr2 = 0x1DA;
                    ++ptr2;
                    goto loc_1DB;
                }
                else {
                    --ptr2;
                    *ptr2 = 0x1E4;
                    uint256 v217 = *(int256*)(ptr2 + 1);
                    --ptr2;
                    *ptr2 = v217;
                    uint256 v218 = *(int256*)(ptr2 + 3);
                    --ptr2;
                    *ptr2 = v218;
                    --ptr2;
                    *ptr2 = 0xC5D;
                    ++ptr2;
                    /*BAD_CALL!*/ sub_C5D(*ptr2, *(ptr2 + 1));
                    v31 = codesize();
                    *ptr2 = v31;
                    --ptr2;
                    *ptr2 = 0x5B7;
                    ++ptr2;
                }
            }
            ++ptr2;
            v4 = *(ptr2 + 1);
            --ptr2;
            *ptr2 = v4;
            --ptr2;
            *ptr2 = 0x666;
            ++ptr2;
            uint256 v219 = *ptr2;
            ++ptr2;
            if(v219) {
                --ptr2;
                *ptr2 = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                ++ptr2;
                v4 = *ptr2;
                ++ptr2;
                *ptr2 = (uint256)(*ptr2 == v4);
                *ptr2 = (uint256)(*ptr2 == 0x0);
                v31 = codesize();
                --ptr2;
                *ptr2 = v31;
                --ptr2;
                *ptr2 = 0x5BE;
                ++ptr2;
            }
            *ptr2 = 0x5E5;
            ++ptr2;
            uint256 v220 = *ptr2;
            ++ptr2;
            if(v220) {
                *ptr2 = **ptr2;
                uint256 v221 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v221;
                uint256 v222 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v222;
                int256* ptr19 = *ptr2;
                ++ptr2;
                *ptr19 = *ptr2;
                *ptr2 = 0x1;
                --ptr2;
                *ptr2 = 0x1;
                --ptr2;
                *ptr2 = 0xA0;
                ++ptr2;
                *ptr2 = *ptr2 << 0xA0;
                uint256 v223 = *ptr2;
                ++ptr2;
                *ptr2 = v223 - *ptr2;
                uint256 v224 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v224;
                uint256 v225 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + &loc_4);
                *(int256*)(ptr2 + &loc_4) = v225;
                uint256 v226 = *ptr2;
                ++ptr2;
                *ptr2 = *ptr2 & v226;
                uint256 v227 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v227;
                uint256 v228 = *(int256*)(ptr2 + 3);
                --ptr2;
                *ptr2 = v228;
                uint256 v229 = *ptr2;
                ++ptr2;
                *ptr2 = *ptr2 + v229;
                uint256 v230 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v230;
                uint256 v231 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v231;
                int256* ptr20 = *ptr2;
                ++ptr2;
                *ptr20 = *ptr2;
                *ptr2 = 0x20;
                uint256 v232 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v232;
                uint256 v233 = *ptr2;
                ++ptr2;
                *ptr2 = *ptr2 + v233;
                uint256 v234 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = v234;
                uint256 v235 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v235;
                uint256 v236 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = v236;
                int256* ptr21 = *ptr2;
                ++ptr2;
                uint256 v237 = *ptr2;
                ++ptr2;
                *ptr21 = v237;
                uint256 v238 = *(int256*)(ptr2 + &loc_2);
                --ptr2;
                *ptr2 = v238;
                uint256 v239 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v239;
                uint256 v240 = *(int256*)(ptr2 + &loc_2);
                --ptr2;
                *ptr2 = v240;
                uint256 v241 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v241;
                uint256 v242 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v242;
                uint256 v243 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v243;
                --ptr2;
                *ptr2 = 0x40;
                ++ptr2;
                *ptr2 = *ptr2 + 0x40;
                uint256 v244 = *ptr2;
                ++ptr2;
                *ptr2 = v244 - *ptr2;
                uint256 v245 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v245;
                --ptr2;
                *ptr2 = 0x0;
                --ptr2;
                *ptr2 = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                v15 = gasleft();
                --ptr2;
                *ptr2 = v15;
                uint256 v246 = *ptr2;
                ++ptr2;
                address v247 = *ptr2;
                ++ptr2;
                v3 = *ptr2;
                ++ptr2;
                v2 = *ptr2;
                ++ptr2;
                v1 = *ptr2;
                ++ptr2;
                v209 = *ptr2;
                ++ptr2;
                v31 = call(v246, v247, v3, v2, v1, v209, *ptr2);
                *ptr2 = v31;
                uint256 v248 = *ptr2;
                --ptr2;
                *ptr2 = (uint256)(*ptr2 == 0x0);
                --ptr2;
                *ptr2 = 0x659;
                ++ptr2;
                uint256 v249 = *ptr2;
                ++ptr2;
                if(v249) {
                    --ptr2;
                    *ptr2 = 0x661;
                    --ptr2;
                    *ptr2 = 0xC89;
                    ++ptr2;
                    /*BAD_CALL!*/ sub_C89();
                    --ptr2;
                    *ptr2 = 0x62D;
                    ++ptr2;
                }
                --ptr2;
                *ptr2 = 0x63B;
                ++ptr2;
                uint256 v250 = *ptr2;
                ++ptr2;
                if(v250) {
                    uint256 v251 = *(int256*)(ptr2 + 1);
                    --ptr2;
                    *ptr2 = v251;
                    --ptr2;
                    *ptr2 = 0x651;
                    *ptr2 = *(int256*)(ptr2 + 3);
                    *(int256*)(ptr2 + 3) = 0x651;
                    uint256 v252 = *ptr2;
                    *ptr2 = *(int256*)(ptr2 + 1);
                    *(int256*)(ptr2 + 1) = v252;
                    v26 = returndatasize();
                    --ptr2;
                    *ptr2 = v26;
                    uint256 v253 = *ptr2;
                    ++ptr2;
                    *ptr2 = (uint256)(*ptr2 > v253);
                    --ptr2;
                    *ptr2 = 0x1EC;
                    ++ptr2;
                    uint256 v254 = *ptr2;
                    ++ptr2;
                    if(!v254) {
                        --ptr2;
                        *ptr2 = 0x1E4;
                        uint256 v255 = *(int256*)(ptr2 + 1);
                        --ptr2;
                        *ptr2 = v255;
                        uint256 v256 = *(int256*)(ptr2 + 3);
                        --ptr2;
                        *ptr2 = v256;
                        --ptr2;
                        *ptr2 = 0xC5D;
                        ++ptr2;
                        /*BAD_CALL!*/ sub_C5D(*ptr2, *(ptr2 + 1));
                        v31 = codesize();
                        *ptr2 = v31;
                        uint256 v257 = *ptr2;
                        --ptr2;
                        --ptr2;
                        *ptr2 = 0x632;
                        ++ptr2;
                    }
                    else {
                        v31 = returndatasize();
                        *ptr2 = v31;
                        --ptr2;
                        *ptr2 = 0x1DA;
                        ++ptr2;
                        goto loc_1DB;
                    }
                }
                uint256 v258 = *ptr2;
                --ptr2;
                uint256 v259 = *ptr2;
                --ptr2;
                uint256 v260 = *ptr2;
                --ptr2;
                v4 = *ptr2;
                --ptr2;
                --ptr2;
                *ptr2 = 0x5C4;
                ++ptr2;
                goto loc_5CB;
            loc_1DB:
                --ptr2;
                *ptr2 = 0x1E4;
                uint256 v261 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v261;
                uint256 v262 = *(int256*)(ptr2 + 3);
                --ptr2;
                *ptr2 = v262;
                --ptr2;
                *ptr2 = 0xC5D;
                ++ptr2;
                /*BAD_CALL!*/ sub_C5D(*ptr2, *(ptr2 + 1));
                uint256 v263 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v263;
                uint256 v264 = *ptr2;
                ++ptr2;
                *ptr2 = *ptr2 + v264;
                uint256 v265 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v265;
                --ptr2;
                *ptr2 = 0xDE5;
                ++ptr2;
            }
            else {
            loc_5CB:
                ptr2 += &loc_5;
                *ptr2 = 0x5D0;
                ++ptr2;
                v143 = *ptr2;
                ++ptr2;
                if(!v143) {
                    stop();
                }
                --ptr2;
                *ptr2 = 0x2E;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = 0x2E;
                --ptr2;
                *ptr2 = 0x5DD;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = 0x5DD;
                --ptr2;
                *ptr2 = 0xDAF;
                ++ptr2;
                *(ptr2 + &loc_2) = /*BAD_CALL!*/ sub_DAF(*ptr2, *(ptr2 + 1));
                --ptr2;
                *ptr2 = 0x382;
                --ptr2;
                *ptr2 = 0xDFD;
                ++ptr2;
                /*BAD_CALL!*/ sub_DFD();
            }
            uint256 v266 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v266;
            uint256 v267 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v267;
            --ptr2;
            *ptr2 = 0x20;
            *ptr2 = *(int256*)(ptr2 + &loc_2);
            *(int256*)(ptr2 + &loc_2) = 0x20;
            uint256 v268 = *ptr2;
            ++ptr2;
            *ptr2 = v268 - *ptr2;
            v4 = *ptr2;
            ++ptr2;
            *ptr2 = (uint256)(*ptr2 > (int256)v4);
            --ptr2;
            *ptr2 = 0x29;
            ++ptr2;
            uint256 v269 = *ptr2;
            ++ptr2;
            if(v269) {
                goto loc_2A;
            }
            else {
                *ptr2 = **ptr2;
                uint256 v270 = *ptr2;
                --ptr2;
                *ptr2 = (uint256)(*ptr2 == 0x0);
                *ptr2 = (uint256)(*ptr2 == 0x0);
                uint256 v271 = *(int256*)(ptr2 + 1);
                --ptr2;
                *ptr2 = v271;
                v4 = *ptr2;
                ++ptr2;
                *ptr2 = v4 - *ptr2;
                --ptr2;
                *ptr2 = 0x29;
                ++ptr2;
                v143 = *ptr2;
                ++ptr2;
                if(v143) {
                    goto loc_2A;
                }
                else {
                    uint256 v272 = *ptr2;
                    *ptr2 = *(int256*)(ptr2 + 1);
                    *(int256*)(ptr2 + 1) = v272;
                    v4 = *ptr2;
                    ++ptr2;
                    jump v4;
                }
            }
        }
        else {
            uint256 v273 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v273;
            uint256 v274 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + &loc_5);
            *(int256*)(ptr2 + &loc_5) = v274;
            *ptr2 = 0x722;
            uint256 v275 = *(int256*)(ptr2 + &loc_7);
            --ptr2;
            *ptr2 = v275;
            uint256 v276 = *(int256*)(ptr2 + 3);
            --ptr2;
            *ptr2 = v276;
            --ptr2;
            *ptr2 = 0x301D;
            ++ptr2;
            /*BAD_CALL!*/ sub_301D(*ptr2, *(ptr2 + 1));
            uint256 v277 = *(int256*)(ptr2 + 3);
            --ptr2;
            *ptr2 = v277;
            *ptr2 = **ptr2;
            uint256 v278 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v278;
            uint256 v279 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v279;
            int256* ptr22 = *ptr2;
            ++ptr2;
            *ptr22 = *ptr2;
            v27 = v314;
            *ptr2 = v27;
            uint256 v280 = *(int256*)(ptr2 + 6);
            --ptr2;
            *ptr2 = v280;
            uint256 v281 = *(int256*)(ptr2 + &loc_2);
            --ptr2;
            *ptr2 = v281;
            uint256 v282 = *ptr2;
            ++ptr2;
            *ptr2 = *ptr2 + v282;
            uint256 v283 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v283;
            uint256 v284 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v284;
            int256* ptr23 = *ptr2;
            ++ptr2;
            uint256 v285 = *ptr2;
            ++ptr2;
            *ptr23 = v285;
            uint256 v286 = *(int256*)(ptr2 + &loc_9);
            --ptr2;
            *ptr2 = v286;
            uint256 v287 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v287;
            uint256 v288 = *(int256*)(ptr2 + &loc_2);
            --ptr2;
            *ptr2 = v288;
            uint256 v289 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v289;
            uint256 v290 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v290;
            uint256 v291 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v291;
            --ptr2;
            *ptr2 = 0x20;
            ++ptr2;
            *ptr2 = *ptr2 + 0x20;
            uint256 v292 = *ptr2;
            ++ptr2;
            *ptr2 = v292 - *ptr2;
            uint256 v293 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v293;
            uint256 v294 = *(int256*)(ptr2 + &loc_5);
            --ptr2;
            *ptr2 = v294;
            v13 = gasleft();
            --ptr2;
            *ptr2 = v13;
            uint256 v295 = *ptr2;
            ++ptr2;
            address v296 = *ptr2;
            ++ptr2;
            v3 = *ptr2;
            ++ptr2;
            v2 = *ptr2;
            ++ptr2;
            v1 = *ptr2;
            ++ptr2;
            v28 = staticcall(v295, v296, v3, v2, v1, *ptr2);
            *ptr2 = v28;
            uint256 v297 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v297;
            uint256 v298 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v298;
            *ptr2 = (uint256)(*ptr2 == 0x0);
            --ptr2;
            *ptr2 = 0x781;
            ++ptr2;
            uint256 v299 = *ptr2;
            ++ptr2;
            if(v299) {
                --ptr2;
                *ptr2 = 0x789;
                --ptr2;
                *ptr2 = 0xC89;
                ++ptr2;
                /*BAD_CALL!*/ sub_C89();
                --ptr2;
                *ptr2 = 0x744;
                ++ptr2;
            }
            --ptr2;
            *ptr2 = 0x0;
            *ptr2 = *(int256*)(ptr2 + &loc_2);
            *(int256*)(ptr2 + &loc_2) = 0x0;
            --ptr2;
            *ptr2 = 0x754;
            ++ptr2;
            uint256 v300 = *ptr2;
            ++ptr2;
            if(!v300) {
                ++ptr2;
                uint256 v301 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + &loc_4);
                *(int256*)(ptr2 + &loc_4) = v301;
                v25 = codesize();
                --ptr2;
                *ptr2 = v25;
                --ptr2;
                *ptr2 = 0x566;
                ++ptr2;
                goto loc_567;
            }
            else {
                --ptr2;
                *ptr2 = 0x774;
                *ptr2 = *(int256*)(ptr2 + &loc_2);
                *(int256*)(ptr2 + &loc_2) = 0x774;
                ++ptr2;
                uint256 v302 = *(int256*)(ptr2 + &loc_9);
                --ptr2;
                *ptr2 = v302;
                v31 = returndatasize();
                --ptr2;
                *ptr2 = v31;
                uint256 v303 = *(int256*)(ptr2 + 11);
                --ptr2;
                *ptr2 = v303;
                uint256 v304 = *ptr2;
                ++ptr2;
                *ptr2 = (uint256)(*ptr2 < v304);
                --ptr2;
                *ptr2 = 0x77A;
                ++ptr2;
                v0 = *ptr2;
                ++ptr2;
            }
        }

        if(!v0) {
        loc_763:
            --ptr2;
            *ptr2 = 0x76C;
            uint256 v305 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v305;
            uint256 v306 = *(int256*)(ptr2 + 3);
            --ptr2;
            *ptr2 = v306;
            --ptr2;
            *ptr2 = 0xC5D;
            ++ptr2;
            /*BAD_CALL!*/ sub_C5D(*ptr2, *(ptr2 + 1));
            uint256 v307 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v307;
            uint256 v308 = *ptr2;
            ++ptr2;
            *ptr2 = *ptr2 + v308;
            uint256 v309 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v309;
            --ptr2;
            *ptr2 = 0xC96;
            ++ptr2;
            uint256 v310 = *ptr2;
            *ptr2 = *(int256*)(ptr2 + 1);
            *(int256*)(ptr2 + 1) = v310;
            uint256 v311 = *(int256*)(ptr2 + 1);
            --ptr2;
            *ptr2 = v311;
            --ptr2;
            *ptr2 = 0x20;
            *ptr2 = *(int256*)(ptr2 + &loc_2);
            *(int256*)(ptr2 + &loc_2) = 0x20;
            uint256 v312 = *ptr2;
            ++ptr2;
            *ptr2 = v312 - *ptr2;
            v4 = *ptr2;
            ++ptr2;
            *ptr2 = (uint256)(*ptr2 > (int256)v4);
            --ptr2;
            *ptr2 = 0x29;
            ++ptr2;
            v143 = *ptr2;
            ++ptr2;
            if(v143) {
                goto loc_2A;
            }
            else {
                *ptr2 = **ptr2;
                uint256 v313 = *ptr2;
                *ptr2 = *(int256*)(ptr2 + 1);
                *(int256*)(ptr2 + 1) = v313;
                jump *ptr2;
            }
        }

        v31 = returndatasize();
        *ptr2 = v31;
        --ptr2;
        *ptr2 = 0x762;
        ++ptr2;
        goto loc_763;
    }

    function sub_A1() public payable {
        uint256 v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18;
        uint256 v19 = (uint256)msg.value;
        uint256 v20 = 0x29;
        uint256* ptr0 = &v15;

        if(!v19) {
            v14 = v100.length;
            uint256 v21 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC;
            v19 = (uint256)(v14 - 0x4 < 0x60);
            v20 = 0x29;
            ptr0 = &v15;
            if(!v19) {
                v5 = calldataload(0x24);
                v19 = v5;
                v6 = calldataload(0x4);
                v20 = v6;
                v14 = calldataload(0x44);
                v21 = v14;
                uint256 v22 = 0x40;
                uint256 v23 = (uint256)(v21 > 0xFFFFFFFFFFFFFFFF);
                uint256 v24 = 0x29;
                ptr0 = &v21;
                if(!v23) {
                    v4 = v100.length;
                    v24 = v21 + 0x4;
                    /*BAD_CALL!*/ sub_24B(v24, v4);
                    uint256 v25 = v19;
                    v19 = v16;
                    v16 = v25;
                    v20 = v17;
                    v17 = 0x0;
                    v21 = v19;
                    if(v16 <= 0x0) {
                        v23 = 0x0;
                        v17 = 0x2E;
                        v24 = v21;
                        v21 = 0x93D;
                        v22 = v19;
                        v3 = v24;
                        v24 = 0x0;
                        v2 = (uint256)(v3 <= v22);
                        uint256 v26 = 0x954;
                        if(!v2) {
                            sub_DAF(v3, v22);
                            return;
                        }
                        v22 = 0x8FE;
                        ptr0 = &v24;
                        --ptr0;
                        *ptr0 = 0x0;
                        --ptr0;
                        *ptr0 = 0x943;
                        ++ptr0;
                        uint256 v27 = *ptr0;
                        ++ptr0;
                        if(v27) {
                            --ptr0;
                            *ptr0 = 0x94F;
                            uint256 v28 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v28;
                            --ptr0;
                            *ptr0 = 0x382;
                            --ptr0;
                            *ptr0 = 0xECF;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_ECF();
                            --ptr0;
                            *ptr0 = 0x924;
                            ++ptr0;
                        }
                        --ptr0;
                        *ptr0 = 0x937;
                        uint256 v29 = *(int256*)(ptr0 + &loc_4);
                        --ptr0;
                        *ptr0 = v29;
                        --ptr0;
                        *ptr0 = 0x20;
                        uint256 v30 = *(int256*)(ptr0 + &loc_8);
                        --ptr0;
                        *ptr0 = v30;
                        v7 = calldataload(*ptr0);
                        *ptr0 = v7;
                        uint256 v31 = *(int256*)(ptr0 + &loc_9);
                        --ptr0;
                        *ptr0 = v31;
                        uint256 v32 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v32;
                        uint256 v33 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v33;
                        v8 = calldataload(*ptr0);
                        *ptr0 = v8;
                        uint256 v34 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 3);
                        *(int256*)(ptr0 + 3) = v34;
                        uint256 v35 = *(int256*)(ptr0 + 3);
                        --ptr0;
                        *ptr0 = v35;
                        --ptr0;
                        *ptr0 = 0x1B01;
                        ++ptr0;
                        /*BAD_CALL!*/ sub_1B01(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                        uint256 v36 = *(int256*)(ptr0 + &loc_4);
                        --ptr0;
                        *ptr0 = v36;
                        --ptr0;
                        *ptr0 = 0x1B91;
                        ++ptr0;
                        *(ptr0 + 3) = /*BAD_CALL!*/ sub_1B91(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                        uint256 v37 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = v37;
                        --ptr0;
                        *ptr0 = 0x1478;
                        ++ptr0;
                        uint256 v38 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v38;
                        uint256 v39 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_4);
                        *(int256*)(ptr0 + &loc_4) = v39;
                        uint256 v40 = *(int256*)(ptr0 + 3);
                        --ptr0;
                        *ptr0 = v40;
                        v11 = calldataload(*ptr0);
                        *ptr0 = v11;
                        uint256 v41 = *(int256*)(ptr0 + &loc_4);
                        --ptr0;
                        *ptr0 = v41;
                        uint256 v42 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v42;
                        --ptr0;
                        *ptr0 = 0x20;
                        ++ptr0;
                        *ptr0 = *ptr0 + 0x20;
                        v14 = calldataload(*ptr0);
                        *ptr0 = v14;
                        uint256 v43 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_4);
                        *(int256*)(ptr0 + &loc_4) = v43;
                        uint256 v44 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v44;
                        uint256 v45 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 3);
                        *(int256*)(ptr0 + 3) = v45;
                        uint256 v46 = *ptr0;
                        --ptr0;
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        uint256 v47 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v47;
                        --ptr0;
                        *ptr0 = 0x0;
                        v1 = *(int256*)(ptr0 + &loc_2);
                        --ptr0;
                        *ptr0 = v1;
                        --ptr0;
                        *ptr0 = 0x1675;
                        ++ptr0;
                        uint256 v48 = *ptr0;
                        ++ptr0;
                        if(v48) {
                            *ptr0 = 0x1682;
                            uint256 v49 = *(int256*)(ptr0 + &loc_5);
                            --ptr0;
                            *ptr0 = v49;
                            uint256 v50 = *(int256*)(ptr0 + &loc_4);
                            --ptr0;
                            *ptr0 = v50;
                            uint256 v51 = *(int256*)(ptr0 + &loc_9);
                            --ptr0;
                            *ptr0 = v51;
                            v1 = *(int256*)(ptr0 + &loc_7);
                            --ptr0;
                            *ptr0 = v1;
                            --ptr0;
                            *ptr0 = 0x16A2;
                            ++ptr0;
                            *(ptr0 + &loc_4) = /*BAD_CALL!*/ sub_16A2(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2), *(ptr0 + 3));
                            --ptr0;
                            *ptr0 = 0x1490;
                            ++ptr0;
                        }
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        --ptr0;
                        *ptr0 = 0x149F;
                        ++ptr0;
                        v0 = *ptr0;
                        ++ptr0;
                        if(!v0) {
                            ptr0 += &loc_8;
                            stop();
                        }
                        --ptr0;
                        *ptr0 = 0x15A6;
                        *ptr0 = *(int256*)(ptr0 + &loc_4);
                        *(int256*)(ptr0 + &loc_4) = 0x15A6;
                        --ptr0;
                        *ptr0 = 0xB58;
                        *ptr0 = *(int256*)(ptr0 + 3);
                        *(int256*)(ptr0 + 3) = 0xB58;
                        --ptr0;
                        *ptr0 = 0x0;
                        --ptr0;
                        *ptr0 = 0x1660;
                        ++ptr0;
                        uint256 v52 = *ptr0;
                        ++ptr0;
                        if(v52) {
                            --ptr0;
                            *ptr0 = 0x1670;
                            --ptr0;
                            *ptr0 = 0x166B;
                            --ptr0;
                            *ptr0 = 0x1132;
                            ++ptr0;
                            *ptr0 = /*BAD_CALL!*/ sub_1132();
                            --ptr0;
                            *ptr0 = 0x4E16;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_4E16(*ptr0);
                            --ptr0;
                            *ptr0 = 0x14CD;
                            ++ptr0;
                        }
                        --ptr0;
                        *ptr0 = 0x1;
                        --ptr0;
                        *ptr0 = 0x1;
                        --ptr0;
                        *ptr0 = 0xA0;
                        ++ptr0;
                        *ptr0 = *ptr0 << 0xA0;
                        uint256 v53 = *ptr0;
                        ++ptr0;
                        *ptr0 = v53 - *ptr0;
                        uint256 v54 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v54;
                        uint256 v55 = *(int256*)(ptr0 + &loc_8);
                        --ptr0;
                        *ptr0 = v55;
                        uint256 v56 = *(int256*)(ptr0 + &loc_2);
                        --ptr0;
                        *ptr0 = v56;
                        uint256 v57 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 & v57;
                        --ptr0;
                        *ptr0 = 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C;
                        ++ptr0;
                        *ptr0 = (uint256)(*ptr0 == 0xBB4CDB9CBD36B01BD1CBAEBF2DE08D9173BC095C);
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        uint256 v58 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v58;
                        uint256 v59 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v59;
                        --ptr0;
                        *ptr0 = 0x1657;
                        ++ptr0;
                        uint256 v60 = *ptr0;
                        ++ptr0;
                        if(v60) {
                            uint256 v61 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v61;
                            ++ptr0;
                            *ptr0 = (uint256)(*ptr0 == 0x0);
                            v14 = codesize();
                            --ptr0;
                            *ptr0 = v14;
                            --ptr0;
                            *ptr0 = 0x14F7;
                            ++ptr0;
                        }
                        ++ptr0;
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        --ptr0;
                        *ptr0 = 0x160C;
                        ++ptr0;
                        uint256 v62 = *ptr0;
                        ++ptr0;
                        if(!v62) {
                            --ptr0;
                            *ptr0 = 0x1505;
                            --ptr0;
                            *ptr0 = 0x11F6;
                            ++ptr0;
                            *ptr0 = /*BAD_CALL!*/ sub_11F6();
                            uint256 v63 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_8);
                            *(int256*)(ptr0 + &loc_8) = v63;
                            --ptr0;
                            *ptr0 = 0x1520;
                            --ptr0;
                            *ptr0 = 0x1511;
                            --ptr0;
                            *ptr0 = 0xCA5;
                            ++ptr0;
                            *ptr0 = /*BAD_CALL!*/ sub_CA5();
                            --ptr0;
                            *ptr0 = 0x1;
                            --ptr0;
                            *ptr0 = 0x1;
                            --ptr0;
                            *ptr0 = 0xA0;
                            ++ptr0;
                            *ptr0 = *ptr0 << 0xA0;
                            uint256 v64 = *ptr0;
                            ++ptr0;
                            *ptr0 = v64 - *ptr0;
                            uint256 v65 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v65;
                            uint256 v66 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 3);
                            *(int256*)(ptr0 + 3) = v66;
                            uint256 v67 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 & v67;
                            uint256 v68 = *(int256*)(ptr0 + &loc_2);
                            --ptr0;
                            *ptr0 = v68;
                            int256* ptr1 = *ptr0;
                            ++ptr0;
                            v0 = *ptr0;
                            ++ptr0;
                            *ptr1 = v0;
                            v1 = *ptr0;
                            ++ptr0;
                            jump v1;
                        }
                        --ptr0;
                        *ptr0 = 0x1614;
                        --ptr0;
                        *ptr0 = 0x11A7;
                        ++ptr0;
                        *ptr0 = /*BAD_CALL!*/ sub_11A7();
                        uint256 v69 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_8);
                        *(int256*)(ptr0 + &loc_8) = v69;
                        --ptr0;
                        *ptr0 = 0x161F;
                        uint256 v70 = *(int256*)(ptr0 + &loc_4);
                        --ptr0;
                        *ptr0 = v70;
                        uint256 v71 = *(int256*)(ptr0 + &loc_4);
                        --ptr0;
                        *ptr0 = v71;
                        --ptr0;
                        *ptr0 = 0xD61;
                        ++ptr0;
                        *(ptr0 + &loc_2) = /*BAD_CALL!*/ sub_D61(*ptr0, *(ptr0 + 1));
                        --ptr0;
                        *ptr0 = 0x1639;
                        --ptr0;
                        *ptr0 = 0x162A;
                        --ptr0;
                        *ptr0 = 0xCA5;
                        ++ptr0;
                        *ptr0 = /*BAD_CALL!*/ sub_CA5();
                        --ptr0;
                        *ptr0 = 0x1;
                        --ptr0;
                        *ptr0 = 0x1;
                        --ptr0;
                        *ptr0 = 0xA0;
                        ++ptr0;
                        *ptr0 = *ptr0 << 0xA0;
                        uint256 v72 = *ptr0;
                        ++ptr0;
                        *ptr0 = v72 - *ptr0;
                        uint256 v73 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v73;
                        uint256 v74 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_4);
                        *(int256*)(ptr0 + &loc_4) = v74;
                        uint256 v75 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 & v75;
                        uint256 v76 = *(int256*)(ptr0 + 3);
                        --ptr0;
                        *ptr0 = v76;
                        int256* ptr2 = *ptr0;
                        ++ptr0;
                        v0 = *ptr0;
                        ++ptr0;
                        *ptr2 = v0;
                        v1 = *ptr0;
                        ++ptr0;
                        jump v1;
                    }
                    v23 = v21;
                    v21 = 0x0;
                    v9 = calldataload(v15);
                    v24 = v9 + v15;
                    v10 = calldataload(v24);
                    uint256 v77 = 0xFB6;
                    /*BAD_CALL!*/ sub_FB6(v10);
                    v22 = (uint256)(v10 == 0x2);
                    v3 = 0xA1A;
                    ptr0 = &v24;
                    if(v22) {
                        uint256 v78 = v24;
                        v24 = 0x0;
                        v17 = v78;
                        v2 = 0xFC8;
                        v22 = /*BAD_CALL!*/ sub_FC8(0x0);
                        v23 = v18;
                        v18 = 0x9E3;
                        v21 = v23;
                        v20 = 0x0;
                        v23 = 0x978;
                        ptr0 = &v21;
                    }
                    uint256 v79 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v79;
                    --ptr0;
                    *ptr0 = 0x9E3;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = 0x9E3;
                    --ptr0;
                    *ptr0 = 0x986;
                    uint256 v80 = *(int256*)(ptr0 + &loc_8);
                    --ptr0;
                    *ptr0 = v80;
                    --ptr0;
                    *ptr0 = 0xDA0;
                    ++ptr0;
                    *(ptr0 + 1) = /*BAD_CALL!*/ sub_DA0(*ptr0);
                    uint256 v81 = *(int256*)(ptr0 + &loc_4);
                    --ptr0;
                    *ptr0 = v81;
                    uint256 v82 = *ptr0;
                    ++ptr0;
                    *ptr0 = (uint256)(*ptr0 > v82);
                    *ptr0 = (uint256)(*ptr0 == 0x0);
                    --ptr0;
                    *ptr0 = 0xA0C;
                    ++ptr0;
                    v0 = *ptr0;
                    ++ptr0;
                    if(!v0) {
                        --ptr0;
                        *ptr0 = 0x9AE;
                        --ptr0;
                        *ptr0 = 0x9A7;
                        --ptr0;
                        *ptr0 = 0x99C;
                        uint256 v83 = *(int256*)(ptr0 + 6);
                        --ptr0;
                        *ptr0 = v83;
                        --ptr0;
                        *ptr0 = 0xD4B;
                        ++ptr0;
                        *(ptr0 + 1) = /*BAD_CALL!*/ sub_D4B(*ptr0);
                        --ptr0;
                        *ptr0 = 0x5;
                        ++ptr0;
                        *ptr0 = *ptr0 << 0x5;
                        uint256 v84 = *(int256*)(ptr0 + &loc_9);
                        --ptr0;
                        *ptr0 = v84;
                        uint256 v85 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v85;
                        v14 = calldataload(*ptr0);
                        *ptr0 = v14;
                        uint256 v86 = *(int256*)(ptr0 + &loc_9);
                        --ptr0;
                        *ptr0 = v86;
                        uint256 v87 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v87;
                        uint256 v88 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v88;
                        v1 = *ptr0;
                        ++ptr0;
                        jump v1;
                    }
                    --ptr0;
                    *ptr0 = 0x20;
                    uint256 v89 = *(int256*)(ptr0 + &loc_7);
                    --ptr0;
                    *ptr0 = v89;
                    v12 = calldataload(*ptr0);
                    *ptr0 = v12;
                    uint256 v90 = *(int256*)(ptr0 + &loc_8);
                    --ptr0;
                    *ptr0 = v90;
                    uint256 v91 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v91;
                    uint256 v92 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v92;
                    v13 = calldataload(*ptr0);
                    *ptr0 = v13;
                    uint256 v93 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v93;
                    --ptr0;
                    *ptr0 = 0x9B0;
                    ++ptr0;
                    --ptr0;
                    *ptr0 = 0x9CB;
                    --ptr0;
                    *ptr0 = 0x9C2;
                    --ptr0;
                    *ptr0 = 0x40;
                    uint256 v94 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v94;
                    uint256 v95 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v95;
                    v14 = calldataload(*ptr0);
                    *ptr0 = v14;
                    uint256 v96 = *ptr0;
                    --ptr0;
                    uint256 v97 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 6);
                    *(int256*)(ptr0 + 6) = v97;
                    --ptr0;
                    *ptr0 = 0xF8C;
                    ++ptr0;
                    *(ptr0 + 3) = /*BAD_CALL!*/ sub_F8C(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                    --ptr0;
                    *ptr0 = 0x186A0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = 0x186A0;
                    uint256 v98 = *ptr0;
                    ++ptr0;
                    *ptr0 = v98 / *ptr0;
                    uint256 v99 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v99;
                    v1 = *ptr0;
                    ++ptr0;
                    jump v1;
                }
            }
        }

        --ptr0;
        *ptr0 = 0x0;
        --ptr0;
        *ptr0 = 0x0;
        ++ptr0;
        v0 = *ptr0;
        ++ptr0;
        revert(0x0, v0);
    }

    function sub_98() public payable {
        address v0;
        uint256 v1;
        address v2, v3;
        uint256 v4;

        if(!msg.value) {
            v1 = v6.length;
            if((int256)(v1 - 0x4) >= 0x40) {
                v0 = calldataload(0x4);
                sub_A31((uint256)v0);
                v2 = v5;
                sub_E27((uint256)(address)(v2 == 0xDBD7FA4EA45B65BFA524D38C579D5B120A4E3EE0));
                v3 = calldataload(0x24);
                v4 = gasleft();
                v1 = call(v4, v0, v3, 0x0, 0x0, 0x0, 0x0);
                sub_E5F();
                return(0x0, 0x0);
            }
        }

        revert(0x0, 0x0);
    }

    function sub_8F() public payable {
        uint256 v0, v1;
        address v2, v3;
        uint256 v4;

        if(!msg.value) {
            v0 = v8.length;
            if(v0 - 0x4 >= 0x60) {
                v1 = calldataload(0x4);
                sub_A31(v1);
                v2 = calldataload(0x24);
                sub_A31((uint256)v2);
                v3 = v7;
                sub_E27((uint256)(address)(v3 == 0xDBD7FA4EA45B65BFA524D38C579D5B120A4E3EE0));
                uint256 v5 = sub_E8F();
                uint256 v6 = *0x40;
                *(uint256*)(v6 + 0x20) = v5;
                *(uint256*)(v6 + 0x24) = (uint256)(address(v2));
                v4 = calldataload(0x44);
                *(uint256*)(v6 + 0x44) = v4;
                return;
            }
        }

        revert(0x0, 0x0);
    }

    function sub_C5() {
        // Decompilation error
    }

    function sub_F2(uint256 param0) private pure returns (uint256) {
        uint256 v0, v1, result;

        if((int256)(param0 - 0x4) >= 0x60) {
            v0 = calldataload(0x4);
            v1 = calldataload(0x24);
            result = calldataload(0x44);
            if(result <= 0xFFFFFFFFFFFFFFFF) {
                (v1, result) = sub_C5(result + 0x4, param0);
                return result;
            }
        }

        revert(0x0, 0x0);
    }

    function sub_128() private {
        uint256 v0, v1, v2, v3, v4, v5, v6, v7, v8;
        address v9;
        uint256 v10, v11, v12;
        address v13;
        uint256 v14;
        address v15;
        uint256 v16, v17, v18, v19, v20, v21, v22, v23;
        address v24;
        uint256 v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38;
        uint256 v39 = (uint256)msg.value;
        uint256 v40 = 0x29;
        uint256* ptr0 = &v20;

        if(!v39) {
            v35 = v195.length;
            /*BAD_CALL!*/ sub_F2(v35);
            uint256 v41 = v21;
            v20 = v36;
            v36 = 0x20;
            uint256 v42 = v20;
            v20 = v37;
            v21 = v42;
            if(!(uint256)(v20 <= 0x20)) {
                /*BAD_CALL!*/ sub_B73(v41, v41);
                v24 = v194;
                v37 = v22;
                v22 = (uint256)v24;
                v25 = calldataload(v37 + v38);
                v37 = v38;
                v38 = v25;
                v8 = calldataload(v37 + 0x40);
                v21 = 0x2E;
                v41 = v8;
            }
            else {
                /*BAD_CALL!*/ sub_360E(v41, v20 + v41);
                ptr0 = &v21;
                jump v21;
            }
            v37 = *0x40;
            v20 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
            *(uint256*)v37 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
            v9 = v193;
            *(address*)(v37 + 0x4) = v9;
            v39 = v22;
            v22 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
            v23 = calldataload(v21 + 0x20);
            uint256 v43 = v41;
            v41 = v23 + v21;
            uint256 v44 = v43;
            v43 = v36;
            v36 = 0x20;
            uint256 v45 = v43;
            v43 = v21;
            v21 = v20;
            uint256 v46 = v43;
            v43 = v37;
            v37 = v44;
            uint256 v47 = v43;
            v20 = v39;
            v39 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
            v40 = 0x20;
            v43 = v46;
            uint256 v48 = 0x3413, v49 = v45;
            v10 = calldataload(v41 + 0x20);
            uint256 v50 = v10, v51 = v47;
            address v52 = (address)(address(v50));
            v26 = gasleft();
            uint256 v53 = v26;
            v11 = staticcall(v26, v52, v51, 0x24, v47, 0x20);
            uint256 v54 = v47, v55 = v11;
            if((uint256)(v11 == 0x0)) {
                sub_C89();
            }
            uint256 v56 = v55;
            v55 = 0x0;
            uint256 v57 = 0x35E2;
            ptr0 = &v54;
            if(!v56) {
                goto loc_33DF;
            }
            else {
                v56 = v50;
                v50 = 0x35FA;
                v55 = v56;
                v56 = 0x20;
                v27 = returndatasize();
                v57 = (uint256)(v27 < 0x20);
                v51 = 0x77A;
                ptr0 = &v56;
            }
            if(!v57) {
                v53 = 0xC5D;
                /*BAD_CALL!*/ sub_C5D(v54, 0x20);
                v56 = 0x35FA;
                v50 = 0x20;
                v19 = codesize();
                v57 = v19;
                v51 = 0x33DE;
                ptr0 = &v57;
            loc_33DF:
                ++ptr0;
                uint256 v58 = *(int256*)(ptr0 + &loc_2);
                --ptr0;
                *ptr0 = v58;
                uint256 v59 = *(int256*)(ptr0 + &loc_9);
                --ptr0;
                *ptr0 = v59;
                --ptr0;
                *ptr0 = 0x0;
                *ptr0 = *(int256*)(ptr0 + &loc_E);
                *(int256*)(ptr0 + &loc_E) = 0x0;
                --ptr0;
                *ptr0 = 0x0;
                --ptr0;
                *ptr0 = 0x357F;
                ++ptr0;
                uint256 v60 = *ptr0;
                ++ptr0;
                if(v60) {
                    --ptr0;
                    *ptr0 = 0x35CD;
                    *ptr0 = *(int256*)(ptr0 + &loc_4);
                    *(int256*)(ptr0 + &loc_4) = 0x35CD;
                    uint256 v61 = *(int256*)(ptr0 + &loc_8);
                    --ptr0;
                    *ptr0 = v61;
                    v35 = calldataload(*ptr0);
                    *ptr0 = v35;
                    uint256 v62 = *(int256*)(ptr0 + &loc_9);
                    --ptr0;
                    *ptr0 = v62;
                    uint256 v63 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v63;
                    uint256 v64 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = v64;
                    --ptr0;
                    *ptr0 = 0x35B0;
                    --ptr0;
                    *ptr0 = 0x3596;
                    uint256 v65 = *(int256*)(ptr0 + &loc_5);
                    --ptr0;
                    *ptr0 = v65;
                    uint256 v66 = *(int256*)(ptr0 + &loc_4);
                    --ptr0;
                    *ptr0 = v66;
                    uint256 v67 = *(int256*)(ptr0 + 6);
                    --ptr0;
                    *ptr0 = v67;
                    --ptr0;
                    *ptr0 = 0x1C73;
                    ++ptr0;
                    *(ptr0 + 3) = /*BAD_CALL!*/ sub_1C73(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                    uint256 v68 = *ptr0;
                    --ptr0;
                    uint256 v69 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 6);
                    *(int256*)(ptr0 + 6) = v69;
                    --ptr0;
                    *ptr0 = 0x35A3;
                    --ptr0;
                    *ptr0 = 0x166B;
                    --ptr0;
                    *ptr0 = 0x332D;
                    ++ptr0;
                    --ptr0;
                    *ptr0 = 0x40;
                    *ptr0 = *0x40;
                    uint256 v70 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v70;
                    --ptr0;
                    *ptr0 = 0x333A;
                    uint256 v71 = *(int256*)(ptr0 + &loc_2);
                    --ptr0;
                    *ptr0 = v71;
                    --ptr0;
                    *ptr0 = 0xC27;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_C27(*ptr0);
                    --ptr0;
                    *ptr0 = 0x12;
                    uint256 v72 = *(int256*)(ptr0 + &loc_2);
                    --ptr0;
                    *ptr0 = v72;
                    int256* ptr1 = *ptr0;
                    ++ptr0;
                    *ptr1 = *ptr0;
                    *ptr0 = 0x747261646520233020626F72726F77696E67;
                    --ptr0;
                    *ptr0 = 0x70;
                    ++ptr0;
                    *ptr0 = *ptr0 << 0x70;
                    --ptr0;
                    *ptr0 = 0x20;
                    uint256 v73 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v73;
                    uint256 v74 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v74;
                    int256* ptr2 = *ptr0;
                    ++ptr0;
                    v7 = *ptr0;
                    ++ptr0;
                    *ptr2 = v7;
                    v6 = *ptr0;
                    ++ptr0;
                    jump v6;
                }
                else {
                    ptr0 += &loc_4;
                    uint256 v75 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v75;
                    --ptr0;
                    *ptr0 = 0x19CC;
                    ++ptr0;
                    *(ptr0 + 3) = /*BAD_CALL!*/ sub_19CC(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                    ++ptr0;
                    uint256 v76 = *ptr0;
                    --ptr0;
                    v12 = calldataload(*ptr0);
                    *ptr0 = v12;
                    uint256 v77 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v77;
                    uint256 v78 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v78;
                    v28 = calldataload(*ptr0);
                    *ptr0 = v28;
                    uint256 v79 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 & v79;
                    uint256 v80 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_7);
                    *(int256*)(ptr0 + &loc_7) = v80;
                    --ptr0;
                    *ptr0 = 0x3462;
                    uint256 v81 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v81;
                    --ptr0;
                    *ptr0 = 0x40;
                    *ptr0 = *0x40;
                    uint256 v82 = *(int256*)(ptr0 + 6);
                    --ptr0;
                    *ptr0 = v82;
                    uint256 v83 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v83;
                    int256* ptr3 = *ptr0;
                    ++ptr0;
                    uint256 v84 = *ptr0;
                    ++ptr0;
                    *ptr3 = v84;
                    uint256 v85 = *(int256*)(ptr0 + &loc_7);
                    --ptr0;
                    *ptr0 = v85;
                    uint256 v86 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v86;
                    uint256 v87 = *(int256*)(ptr0 + 12);
                    --ptr0;
                    *ptr0 = v87;
                    uint256 v88 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v88;
                    uint256 v89 = *ptr0;
                    --ptr0;
                    --ptr0;
                    *ptr0 = 0x3446;
                    v13 = v193;
                    --ptr0;
                    *ptr0 = v13;
                    --ptr0;
                    *ptr0 = 0x4;
                    uint256 v90 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v90;
                    uint256 v91 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v91;
                    uint256 v92 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = v92;
                    uint256 v93 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v93;
                    uint256 v94 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = v94;
                    --ptr0;
                    *ptr0 = 0x20;
                    uint256 v95 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v95;
                    uint256 v96 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v96;
                    uint256 v97 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 3);
                    *(int256*)(ptr0 + 3) = v97;
                    --ptr0;
                    *ptr0 = 0x1;
                    --ptr0;
                    *ptr0 = 0x1;
                    --ptr0;
                    *ptr0 = 0xA0;
                    ++ptr0;
                    *ptr0 = *ptr0 << 0xA0;
                    uint256 v98 = *ptr0;
                    ++ptr0;
                    *ptr0 = v98 - *ptr0;
                    uint256 v99 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 & v99;
                    uint256 v100 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v100;
                    int256* ptr4 = *ptr0;
                    ++ptr0;
                    *ptr4 = *ptr0;
                    ptr0 += &loc_2;
                    uint256 v101 = *ptr0;
                    ++ptr0;
                    *ptr0 = v101 - *ptr0;
                    uint256 v102 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = v102;
                    v29 = gasleft();
                    --ptr0;
                    *ptr0 = v29;
                    uint256 v103 = *ptr0;
                    ++ptr0;
                    address v104 = *ptr0;
                    ++ptr0;
                    v5 = *ptr0;
                    ++ptr0;
                    v4 = *ptr0;
                    ++ptr0;
                    v3 = *ptr0;
                    ++ptr0;
                    v14 = staticcall(v103, v104, v5, v4, v3, *ptr0);
                    *ptr0 = v14;
                    uint256 v105 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v105;
                    uint256 v106 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v106;
                    *ptr0 = (uint256)(*ptr0 == 0x0);
                    --ptr0;
                    *ptr0 = 0x3572;
                    ++ptr0;
                    v2 = *ptr0;
                    ++ptr0;
                }
                if(v2) {
                    --ptr0;
                    *ptr0 = 0x357A;
                    --ptr0;
                    *ptr0 = 0xC89;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_C89();
                    --ptr0;
                    *ptr0 = 0x3452;
                    ++ptr0;
                }
                --ptr0;
                *ptr0 = 0x0;
                *ptr0 = *(int256*)(ptr0 + &loc_2);
                *(int256*)(ptr0 + &loc_2) = 0x0;
                --ptr0;
                *ptr0 = 0x3555;
                ++ptr0;
                uint256 v107 = *ptr0;
                ++ptr0;
                if(!v107) {
                    goto loc_345B;
                }
                else {
                    --ptr0;
                    *ptr0 = 0x356C;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = 0x356C;
                    ++ptr0;
                    uint256 v108 = *(int256*)(ptr0 + &loc_8);
                    --ptr0;
                    *ptr0 = v108;
                    v30 = returndatasize();
                    --ptr0;
                    *ptr0 = v30;
                    uint256 v109 = *(int256*)(ptr0 + &loc_A);
                    --ptr0;
                    *ptr0 = v109;
                    uint256 v110 = *ptr0;
                    ++ptr0;
                    *ptr0 = (uint256)(*ptr0 < v110);
                    --ptr0;
                    *ptr0 = 0x77A;
                    ++ptr0;
                    v1 = *ptr0;
                    ++ptr0;
                }
                if(!v1) {
                    --ptr0;
                    *ptr0 = 0x76C;
                    uint256 v111 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v111;
                    uint256 v112 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v112;
                    --ptr0;
                    *ptr0 = 0xC5D;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                    v31 = codesize();
                    --ptr0;
                    *ptr0 = v31;
                    --ptr0;
                    *ptr0 = 0x345A;
                    ++ptr0;
                loc_345B:
                    ++ptr0;
                    uint256 v113 = *ptr0;
                    ++ptr0;
                    *ptr0 = (uint256)(*ptr0 > v113);
                    *ptr0 = (uint256)(*ptr0 == 0x0);
                    --ptr0;
                    *ptr0 = 0xD6E;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_D6E(*ptr0);
                    uint256 v114 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v114;
                    uint256 v115 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 & v115;
                    --ptr0;
                    *ptr0 = 0x34E9;
                    ++ptr0;
                    uint256 v116 = *ptr0;
                    ++ptr0;
                    if(!v116) {
                        goto loc_346C;
                    }
                    else {
                        --ptr0;
                        *ptr0 = 0x40;
                        *ptr0 = *0x40;
                        --ptr0;
                        *ptr0 = 0xA9059CBB;
                        --ptr0;
                        *ptr0 = 0xE0;
                        ++ptr0;
                        *ptr0 = *ptr0 << 0xE0;
                        uint256 v117 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v117;
                        int256* ptr5 = *ptr0;
                        ++ptr0;
                        *ptr5 = *ptr0;
                        *ptr0 = 0x1;
                        --ptr0;
                        *ptr0 = 0x1;
                        --ptr0;
                        *ptr0 = 0xA0;
                        ++ptr0;
                        *ptr0 = *ptr0 << 0xA0;
                        uint256 v118 = *ptr0;
                        ++ptr0;
                        *ptr0 = v118 - *ptr0;
                        uint256 v119 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = v119;
                        uint256 v120 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v120;
                        uint256 v121 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = v121;
                        uint256 v122 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 & v122;
                        --ptr0;
                        *ptr0 = 0x4;
                        uint256 v123 = *(int256*)(ptr0 + &loc_2);
                        --ptr0;
                        *ptr0 = v123;
                        uint256 v124 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v124;
                        int256* ptr6 = *ptr0;
                        ++ptr0;
                        *ptr6 = *ptr0;
                        *ptr0 = 0x24;
                        uint256 v125 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v125;
                        uint256 v126 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v126;
                        uint256 v127 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = v127;
                        uint256 v128 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v128;
                        uint256 v129 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = v129;
                        int256* ptr7 = *ptr0;
                        ++ptr0;
                        uint256 v130 = *ptr0;
                        ++ptr0;
                        *ptr7 = v130;
                        uint256 v131 = *(int256*)(ptr0 + &loc_2);
                        --ptr0;
                        *ptr0 = v131;
                        uint256 v132 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v132;
                        --ptr0;
                        *ptr0 = 0x44;
                        uint256 v133 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v133;
                        --ptr0;
                        *ptr0 = 0x0;
                        uint256 v134 = *(int256*)(ptr0 + &loc_A);
                        --ptr0;
                        *ptr0 = v134;
                        v18 = gasleft();
                        --ptr0;
                        *ptr0 = v18;
                        uint256 v135 = *ptr0;
                        ++ptr0;
                        address v136 = *ptr0;
                        ++ptr0;
                        v5 = *ptr0;
                        ++ptr0;
                        v4 = *ptr0;
                        ++ptr0;
                        v3 = *ptr0;
                        ++ptr0;
                        uint256 v137 = *ptr0;
                        ++ptr0;
                        v32 = call(v135, v136, v5, v4, v3, v137, *ptr0);
                        *ptr0 = v32;
                        uint256 v138 = *ptr0;
                        --ptr0;
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        --ptr0;
                        *ptr0 = 0x3548;
                        ++ptr0;
                        uint256 v139 = *ptr0;
                        ++ptr0;
                        if(v139) {
                            --ptr0;
                            *ptr0 = 0x3550;
                            --ptr0;
                            *ptr0 = 0xC89;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_C89();
                            --ptr0;
                            *ptr0 = 0x3520;
                            ++ptr0;
                        }
                        --ptr0;
                        *ptr0 = 0x352B;
                        ++ptr0;
                        uint256 v140 = *ptr0;
                        ++ptr0;
                        if(v140) {
                            --ptr0;
                            *ptr0 = 0x3541;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = 0x3541;
                            uint256 v141 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v141;
                            v33 = returndatasize();
                            --ptr0;
                            *ptr0 = v33;
                            uint256 v142 = *(int256*)(ptr0 + &loc_5);
                            --ptr0;
                            *ptr0 = v142;
                            uint256 v143 = *ptr0;
                            ++ptr0;
                            *ptr0 = (uint256)(*ptr0 < v143);
                            --ptr0;
                            *ptr0 = 0x1EC;
                            ++ptr0;
                            uint256 v144 = *ptr0;
                            ++ptr0;
                            if(!v144) {
                                --ptr0;
                                *ptr0 = 0x1E4;
                                uint256 v145 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v145;
                                uint256 v146 = *(int256*)(ptr0 + 3);
                                --ptr0;
                                *ptr0 = v146;
                                --ptr0;
                                *ptr0 = 0xC5D;
                                ++ptr0;
                                /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                                v34 = codesize();
                                *ptr0 = v34;
                                --ptr0;
                                *ptr0 = 0x3525;
                                ++ptr0;
                            }
                            else {
                                v35 = returndatasize();
                                *ptr0 = v35;
                                --ptr0;
                                *ptr0 = 0x1DA;
                                ++ptr0;
                                goto loc_1DB;
                            }
                        }
                        uint256 v147 = *ptr0;
                        --ptr0;
                        --ptr0;
                        *ptr0 = 0x3469;
                        ++ptr0;
                        goto loc_346C;
                    loc_1DB:
                        --ptr0;
                        *ptr0 = 0x1E4;
                        uint256 v148 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v148;
                        uint256 v149 = *(int256*)(ptr0 + 3);
                        --ptr0;
                        *ptr0 = v149;
                        --ptr0;
                        *ptr0 = 0xC5D;
                        ++ptr0;
                        /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                        uint256 v150 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v150;
                        uint256 v151 = *ptr0;
                        ++ptr0;
                        *ptr0 = *ptr0 + v151;
                        uint256 v152 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v152;
                        --ptr0;
                        *ptr0 = 0xDE5;
                        ++ptr0;
                        uint256 v153 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v153;
                        uint256 v154 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v154;
                        --ptr0;
                        *ptr0 = 0x20;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = 0x20;
                        uint256 v155 = *ptr0;
                        ++ptr0;
                        *ptr0 = v155 - *ptr0;
                        v6 = *ptr0;
                        ++ptr0;
                        *ptr0 = (uint256)(*ptr0 > v6);
                        --ptr0;
                        *ptr0 = 0x29;
                        ++ptr0;
                        v0 = *ptr0;
                        ++ptr0;
                    }
                    if(v0) {
                        goto loc_2A;
                    }
                    else {
                        *ptr0 = **ptr0;
                        uint256 v156 = *ptr0;
                        --ptr0;
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        *ptr0 = (uint256)(*ptr0 == 0x0);
                        uint256 v157 = *(int256*)(ptr0 + 1);
                        --ptr0;
                        *ptr0 = v157;
                        v6 = *ptr0;
                        ++ptr0;
                        *ptr0 = v6 - *ptr0;
                        --ptr0;
                        *ptr0 = 0x29;
                        ++ptr0;
                        v7 = *ptr0;
                        ++ptr0;
                        if(v7) {
                            goto loc_2A;
                        }
                        else {
                            uint256 v158 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v158;
                            v6 = *ptr0;
                            ++ptr0;
                            jump v6;
                        loc_346C:
                            ++ptr0;
                            *ptr0 = 0x40;
                            *ptr0 = *0x40;
                            uint256 v159 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v159;
                            uint256 v160 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v160;
                            int256* ptr8 = *ptr0;
                            ++ptr0;
                            *ptr8 = *ptr0;
                            v15 = v193;
                            *ptr0 = v15;
                            --ptr0;
                            *ptr0 = 0x4;
                            uint256 v161 = *(int256*)(ptr0 + &loc_2);
                            --ptr0;
                            *ptr0 = v161;
                            uint256 v162 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v162;
                            int256* ptr9 = *ptr0;
                            ++ptr0;
                            uint256 v163 = *ptr0;
                            ++ptr0;
                            *ptr9 = v163;
                            uint256 v164 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_4);
                            *(int256*)(ptr0 + &loc_4) = v164;
                            uint256 v165 = *(int256*)(ptr0 + &loc_4);
                            --ptr0;
                            *ptr0 = v165;
                            uint256 v166 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v166;
                            --ptr0;
                            *ptr0 = 0x24;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = 0x24;
                            uint256 v167 = *(int256*)(ptr0 + &loc_2);
                            --ptr0;
                            *ptr0 = v167;
                            uint256 v168 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v168;
                            v16 = gasleft();
                            --ptr0;
                            *ptr0 = v16;
                            uint256 v169 = *ptr0;
                            ++ptr0;
                            address v170 = *ptr0;
                            ++ptr0;
                            v5 = *ptr0;
                            ++ptr0;
                            v4 = *ptr0;
                            ++ptr0;
                            v3 = *ptr0;
                            ++ptr0;
                            v35 = staticcall(v169, v170, v5, v4, v3, *ptr0);
                            *ptr0 = v35;
                            uint256 v171 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 3);
                            *(int256*)(ptr0 + 3) = v171;
                            uint256 v172 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v172;
                            *ptr0 = (uint256)(*ptr0 == 0x0);
                            --ptr0;
                            *ptr0 = 0x34DC;
                            ++ptr0;
                            uint256 v173 = *ptr0;
                            ++ptr0;
                            if(v173) {
                                --ptr0;
                                *ptr0 = 0x34E4;
                                --ptr0;
                                *ptr0 = 0xC89;
                                ++ptr0;
                                /*BAD_CALL!*/ sub_C89();
                                --ptr0;
                                *ptr0 = 0x3489;
                                ++ptr0;
                            }
                            --ptr0;
                            *ptr0 = 0x0;
                            *ptr0 = *(int256*)(ptr0 + &loc_4);
                            *(int256*)(ptr0 + &loc_4) = 0x0;
                            --ptr0;
                            *ptr0 = 0x34BB;
                            ++ptr0;
                            uint256 v174 = *ptr0;
                            ++ptr0;
                            if(!v174) {
                            loc_3493:
                                *ptr0 = 0x34AA;
                                ++ptr0;
                                uint256 v175 = *ptr0;
                                ++ptr0;
                                if(v175) {
                                    goto loc_34AB;
                                }
                                else {
                                    goto loc_3498;
                                }
                            }
                            else {
                                --ptr0;
                                *ptr0 = 0x34D5;
                                *ptr0 = *(int256*)(ptr0 + &loc_2);
                                *(int256*)(ptr0 + &loc_2) = 0x34D5;
                                uint256 v176 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + &loc_4);
                                *(int256*)(ptr0 + &loc_4) = v176;
                                *ptr0 = 0x20;
                                v17 = returndatasize();
                                --ptr0;
                                *ptr0 = v17;
                                --ptr0;
                                *ptr0 = 0x20;
                                ++ptr0;
                                *ptr0 = (uint256)(*ptr0 < 0x20);
                                --ptr0;
                                *ptr0 = 0x77A;
                                ++ptr0;
                                uint256 v177 = *ptr0;
                                ++ptr0;
                                if(!v177) {
                                    --ptr0;
                                    *ptr0 = 0x76C;
                                    uint256 v178 = *(int256*)(ptr0 + 1);
                                    --ptr0;
                                    *ptr0 = v178;
                                    uint256 v179 = *(int256*)(ptr0 + 3);
                                    --ptr0;
                                    *ptr0 = v179;
                                    --ptr0;
                                    *ptr0 = 0xC5D;
                                    ++ptr0;
                                    /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                                    uint256 v180 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                                    *(int256*)(ptr0 + &loc_2) = v180;
                                    v35 = codesize();
                                    --ptr0;
                                    *ptr0 = v35;
                                    --ptr0;
                                    *ptr0 = 0x3491;
                                    ++ptr0;
                                    goto loc_3493;
                                }
                            }
                        }
                    }
                }
            }
            v35 = returndatasize();
            *ptr0 = v35;
            --ptr0;
            *ptr0 = 0x762;
            ++ptr0;
            --ptr0;
            *ptr0 = 0x76C;
            uint256 v181 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v181;
            uint256 v182 = *(int256*)(ptr0 + 3);
            --ptr0;
            *ptr0 = v182;
            --ptr0;
            *ptr0 = 0xC5D;
            ++ptr0;
            /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
            uint256 v183 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v183;
            uint256 v184 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 + v184;
            uint256 v185 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 1);
            *(int256*)(ptr0 + 1) = v185;
            --ptr0;
            *ptr0 = 0xC96;
            ++ptr0;
            uint256 v186 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 1);
            *(int256*)(ptr0 + 1) = v186;
            uint256 v187 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v187;
            --ptr0;
            *ptr0 = 0x20;
            *ptr0 = *(int256*)(ptr0 + &loc_2);
            *(int256*)(ptr0 + &loc_2) = 0x20;
            uint256 v188 = *ptr0;
            ++ptr0;
            *ptr0 = v188 - *ptr0;
            v6 = *ptr0;
            ++ptr0;
            *ptr0 = (uint256)(*ptr0 > v6);
            --ptr0;
            *ptr0 = 0x29;
            ++ptr0;
            v7 = *ptr0;
            ++ptr0;
            if(!v7) {
                *ptr0 = **ptr0;
                uint256 v189 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + 1);
                *(int256*)(ptr0 + 1) = v189;
                v6 = *ptr0;
                ++ptr0;
                jump v6;
            }
        }

    loc_2A:
        --ptr0;
        *ptr0 = 0x0;
        --ptr0;
        *ptr0 = 0x0;
        ++ptr0;
        v7 = *ptr0;
        ++ptr0;
        revert(0x0, v7);
    loc_3498:
        uint256 v190 = *ptr0;
        --ptr0;
        --ptr0;
        *ptr0 = 0x34A0;
        ++ptr0;
        v7 = *ptr0;
        ++ptr0;
        if(!v7) {
            ptr0 += &loc_2;
            v6 = *ptr0;
            ++ptr0;
            jump v6;
        }

        --ptr0;
        *ptr0 = 0xA4D;
        *ptr0 = *(int256*)(ptr0 + &loc_2);
        *(int256*)(ptr0 + &loc_2) = 0xA4D;
        uint256 v191 = *ptr0;
        ++ptr0;
        *ptr0 = (uint256)(*ptr0 < v191);
        --ptr0;
        *ptr0 = 0xD6E;
        ++ptr0;
        /*BAD_CALL!*/ sub_D6E(*ptr0);
    loc_34AB:
        --ptr0;
        *ptr0 = 0x34B6;
        uint256 v192 = *(int256*)(ptr0 + &loc_2);
        --ptr0;
        *ptr0 = v192;
        --ptr0;
        *ptr0 = 0x382;
        --ptr0;
        *ptr0 = 0xDFD;
        ++ptr0;
        /*BAD_CALL!*/ sub_DFD();
        --ptr0;
        *ptr0 = 0x3497;
        ++ptr0;
        goto loc_3498;
    }

    function sub_24B() {
        // Decompilation error
    }

    function sub_A31() {
        // Decompilation error
    }

    function sub_A42(uint256 param0) private pure returns (uint256) {
        param0 = calldataload(param0);
        sub_A31(param0);
        return param0;
    }

    function sub_B73() {
        // Decompilation error
    }

    function sub_BA8() private {
        uint256 v0, v1, v2, v3, v4, v5;
        address v6;
        uint256 v7, v8;
        address v9, v10;
        uint256 v11, v12, v13;
        address v14;
        uint256 v15;
        address v16;
        uint256 v17, v18, v19, v20;
        address v21, v22, v23;
        uint256 v24, v25, v26, v27, v28, v29, v30, v31, v32, v33;
        address v34;
        uint256 v35 = v8;

        v8 = 0x60;
        v10 = calldataload(0xA4);
        address v36 = v10;
        v34 = v198.length;
        address v37 = (address)(v34 - 0xC3 <= (int256)v36);
        address v38 = 0x29;
        uint256* ptr0 = &v36;
        if(!v37) {
            v34 = calldataload(v36 + 0xA4);
            v37 = v36;
            v36 = v34;
            address v39 = 0x40;
            v38 = (address)(v36 > 0xFFFFFFFFFFFFFFFF);
            address v40 = 0x29;
            ptr0 = &v37;
            if(!v38) {
                v37 += 0xC4;
                v34 = v198.length;
                v38 = (address)(v34 - (v36 << 0x5) < (int256)v37);
                v40 = 0x29;
                ptr0 = &v37;
                if(!v38) {
                    v38 = v36;
                    v36 = 0xA4D;
                    v22 = v197;
                    v40 = v37;
                    v37 = v22;
                    v23 = calldataload(0xC4);
                    v39 = v38;
                    v38 = v23;
                    v21 = calldataload(0xE4);
                    address v41 = v40;
                    v40 = v21;
                    address v42 = *(address*)0x40;
                    address v43 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
                    *(address*)v42 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
                    v9 = v196;
                    *(address*)(v42 + 0x4) = v9;
                    address v44 = v37;
                    v37 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
                    v24 = calldataload(v41 + 0x20);
                    address v45 = v40;
                    v40 = (address)(v24 + v41);
                    address v46 = v45;
                    v45 = v39;
                    v39 = 0x20;
                    address v47 = v45;
                    v45 = v41;
                    v41 = v43;
                    address v48 = v45;
                    v45 = v42;
                    v42 = v46;
                    address v49 = v45;
                    v43 = v44;
                    v44 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
                    address v50 = 0x20;
                    v45 = v48;
                    uint256 v51 = 0x3413;
                    address v52 = v47;
                    v11 = calldataload((uint256)(v40 + 0x20));
                    uint256 v53 = v11;
                    uint256 v54 = (uint256)v49;
                    address v55 = (address)(address(v53));
                    v25 = gasleft();
                    uint256 v56 = v25;
                    v12 = staticcall(v25, v55, v54, 0x24, v49, 0x20);
                    uint256 v57 = (uint256)v49;
                    uint256 v58 = v12;
                    if((uint256)(v12 == 0x0)) {
                        sub_C89();
                    }
                    uint256 v59 = v58;
                    v58 = 0x0;
                    uint256 v60 = 0x35E2;
                    ptr0 = &v57;
                    if(!v59) {
                        goto loc_33DF;
                    }
                    else {
                        v59 = v53;
                        v53 = 0x35FA;
                        v58 = v59;
                        v59 = 0x20;
                        v26 = returndatasize();
                        v60 = (uint256)(v26 < 0x20);
                        v54 = 0x77A;
                        ptr0 = &v59;
                    }
                    if(!v60) {
                        v56 = 0xC5D;
                        /*BAD_CALL!*/ sub_C5D(v57, 0x20);
                        v59 = 0x35FA;
                        v53 = 0x20;
                        v20 = codesize();
                        v60 = v20;
                        v54 = 0x33DE;
                        ptr0 = &v60;
                    loc_33DF:
                        ++ptr0;
                        uint256 v61 = *(int256*)(ptr0 + &loc_2);
                        --ptr0;
                        *ptr0 = v61;
                        uint256 v62 = *(int256*)(ptr0 + &loc_9);
                        --ptr0;
                        *ptr0 = v62;
                        --ptr0;
                        *ptr0 = 0x0;
                        *ptr0 = *(int256*)(ptr0 + &loc_E);
                        *(int256*)(ptr0 + &loc_E) = 0x0;
                        --ptr0;
                        *ptr0 = 0x0;
                        --ptr0;
                        *ptr0 = 0x357F;
                        ++ptr0;
                        uint256 v63 = *ptr0;
                        ++ptr0;
                        if(v63) {
                            --ptr0;
                            *ptr0 = 0x35CD;
                            *ptr0 = *(int256*)(ptr0 + &loc_4);
                            *(int256*)(ptr0 + &loc_4) = 0x35CD;
                            uint256 v64 = *(int256*)(ptr0 + &loc_8);
                            --ptr0;
                            *ptr0 = v64;
                            v34 = calldataload(*ptr0);
                            *ptr0 = v34;
                            uint256 v65 = *(int256*)(ptr0 + &loc_9);
                            --ptr0;
                            *ptr0 = v65;
                            uint256 v66 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v66;
                            uint256 v67 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_2);
                            *(int256*)(ptr0 + &loc_2) = v67;
                            --ptr0;
                            *ptr0 = 0x35B0;
                            --ptr0;
                            *ptr0 = 0x3596;
                            uint256 v68 = *(int256*)(ptr0 + &loc_5);
                            --ptr0;
                            *ptr0 = v68;
                            uint256 v69 = *(int256*)(ptr0 + &loc_4);
                            --ptr0;
                            *ptr0 = v69;
                            uint256 v70 = *(int256*)(ptr0 + 6);
                            --ptr0;
                            *ptr0 = v70;
                            --ptr0;
                            *ptr0 = 0x1C73;
                            ++ptr0;
                            *(ptr0 + 3) = /*BAD_CALL!*/ sub_1C73(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                            uint256 v71 = *ptr0;
                            --ptr0;
                            uint256 v72 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 6);
                            *(int256*)(ptr0 + 6) = v72;
                            --ptr0;
                            *ptr0 = 0x35A3;
                            --ptr0;
                            *ptr0 = 0x166B;
                            --ptr0;
                            *ptr0 = 0x332D;
                            ++ptr0;
                            --ptr0;
                            *ptr0 = 0x40;
                            *ptr0 = *0x40;
                            uint256 v73 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v73;
                            --ptr0;
                            *ptr0 = 0x333A;
                            uint256 v74 = *(int256*)(ptr0 + &loc_2);
                            --ptr0;
                            *ptr0 = v74;
                            --ptr0;
                            *ptr0 = 0xC27;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_C27(*ptr0);
                            --ptr0;
                            *ptr0 = 0x12;
                            uint256 v75 = *(int256*)(ptr0 + &loc_2);
                            --ptr0;
                            *ptr0 = v75;
                            int256* ptr1 = *ptr0;
                            ++ptr0;
                            *ptr1 = *ptr0;
                            *ptr0 = 0x747261646520233020626F72726F77696E67;
                            --ptr0;
                            *ptr0 = 0x70;
                            ++ptr0;
                            *ptr0 = *ptr0 << 0x70;
                            --ptr0;
                            *ptr0 = 0x20;
                            uint256 v76 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v76;
                            uint256 v77 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v77;
                            int256* ptr2 = *ptr0;
                            ++ptr0;
                            v7 = *ptr0;
                            ++ptr0;
                            *ptr2 = v7;
                            v6 = *ptr0;
                            ++ptr0;
                            jump v6;
                        }
                        else {
                            ptr0 += &loc_4;
                            uint256 v78 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v78;
                            --ptr0;
                            *ptr0 = 0x19CC;
                            ++ptr0;
                            *(ptr0 + 3) = /*BAD_CALL!*/ sub_19CC(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2));
                            ++ptr0;
                            uint256 v79 = *ptr0;
                            --ptr0;
                            v13 = calldataload(*ptr0);
                            *ptr0 = v13;
                            uint256 v80 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v80;
                            uint256 v81 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v81;
                            v27 = calldataload(*ptr0);
                            *ptr0 = v27;
                            uint256 v82 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 & v82;
                            uint256 v83 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_7);
                            *(int256*)(ptr0 + &loc_7) = v83;
                            --ptr0;
                            *ptr0 = 0x3462;
                            uint256 v84 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v84;
                            --ptr0;
                            *ptr0 = 0x40;
                            *ptr0 = *0x40;
                            uint256 v85 = *(int256*)(ptr0 + 6);
                            --ptr0;
                            *ptr0 = v85;
                            uint256 v86 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v86;
                            int256* ptr3 = *ptr0;
                            ++ptr0;
                            uint256 v87 = *ptr0;
                            ++ptr0;
                            *ptr3 = v87;
                            uint256 v88 = *(int256*)(ptr0 + &loc_7);
                            --ptr0;
                            *ptr0 = v88;
                            uint256 v89 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v89;
                            uint256 v90 = *(int256*)(ptr0 + 12);
                            --ptr0;
                            *ptr0 = v90;
                            uint256 v91 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v91;
                            uint256 v92 = *ptr0;
                            --ptr0;
                            --ptr0;
                            *ptr0 = 0x3446;
                            v14 = v196;
                            --ptr0;
                            *ptr0 = v14;
                            --ptr0;
                            *ptr0 = 0x4;
                            uint256 v93 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v93;
                            uint256 v94 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v94;
                            uint256 v95 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_2);
                            *(int256*)(ptr0 + &loc_2) = v95;
                            uint256 v96 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v96;
                            uint256 v97 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_2);
                            *(int256*)(ptr0 + &loc_2) = v97;
                            --ptr0;
                            *ptr0 = 0x20;
                            uint256 v98 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v98;
                            uint256 v99 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 + v99;
                            uint256 v100 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 3);
                            *(int256*)(ptr0 + 3) = v100;
                            --ptr0;
                            *ptr0 = 0x1;
                            --ptr0;
                            *ptr0 = 0x1;
                            --ptr0;
                            *ptr0 = 0xA0;
                            ++ptr0;
                            *ptr0 = *ptr0 << 0xA0;
                            uint256 v101 = *ptr0;
                            ++ptr0;
                            *ptr0 = v101 - *ptr0;
                            uint256 v102 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 & v102;
                            uint256 v103 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v103;
                            int256* ptr4 = *ptr0;
                            ++ptr0;
                            *ptr4 = *ptr0;
                            ptr0 += &loc_2;
                            uint256 v104 = *ptr0;
                            ++ptr0;
                            *ptr0 = v104 - *ptr0;
                            uint256 v105 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + &loc_2);
                            *(int256*)(ptr0 + &loc_2) = v105;
                            v28 = gasleft();
                            --ptr0;
                            *ptr0 = v28;
                            uint256 v106 = *ptr0;
                            ++ptr0;
                            address v107 = *ptr0;
                            ++ptr0;
                            v5 = *ptr0;
                            ++ptr0;
                            v4 = *ptr0;
                            ++ptr0;
                            v3 = *ptr0;
                            ++ptr0;
                            v15 = staticcall(v106, v107, v5, v4, v3, *ptr0);
                            *ptr0 = v15;
                            uint256 v108 = *ptr0;
                            *ptr0 = *(int256*)(ptr0 + 1);
                            *(int256*)(ptr0 + 1) = v108;
                            uint256 v109 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v109;
                            *ptr0 = (uint256)(*ptr0 == 0x0);
                            --ptr0;
                            *ptr0 = 0x3572;
                            ++ptr0;
                            v2 = *ptr0;
                            ++ptr0;
                        }
                        if(v2) {
                            --ptr0;
                            *ptr0 = 0x357A;
                            --ptr0;
                            *ptr0 = 0xC89;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_C89();
                            --ptr0;
                            *ptr0 = 0x3452;
                            ++ptr0;
                        }
                        --ptr0;
                        *ptr0 = 0x0;
                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                        *(int256*)(ptr0 + &loc_2) = 0x0;
                        --ptr0;
                        *ptr0 = 0x3555;
                        ++ptr0;
                        uint256 v110 = *ptr0;
                        ++ptr0;
                        if(!v110) {
                            goto loc_345B;
                        }
                        else {
                            --ptr0;
                            *ptr0 = 0x356C;
                            *ptr0 = *(int256*)(ptr0 + &loc_2);
                            *(int256*)(ptr0 + &loc_2) = 0x356C;
                            ++ptr0;
                            uint256 v111 = *(int256*)(ptr0 + &loc_8);
                            --ptr0;
                            *ptr0 = v111;
                            v29 = returndatasize();
                            --ptr0;
                            *ptr0 = v29;
                            uint256 v112 = *(int256*)(ptr0 + &loc_A);
                            --ptr0;
                            *ptr0 = v112;
                            uint256 v113 = *ptr0;
                            ++ptr0;
                            *ptr0 = (uint256)(*ptr0 < v113);
                            --ptr0;
                            *ptr0 = 0x77A;
                            ++ptr0;
                            v1 = *ptr0;
                            ++ptr0;
                        }
                        if(!v1) {
                            --ptr0;
                            *ptr0 = 0x76C;
                            uint256 v114 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v114;
                            uint256 v115 = *(int256*)(ptr0 + 3);
                            --ptr0;
                            *ptr0 = v115;
                            --ptr0;
                            *ptr0 = 0xC5D;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                            v30 = codesize();
                            --ptr0;
                            *ptr0 = v30;
                            --ptr0;
                            *ptr0 = 0x345A;
                            ++ptr0;
                        loc_345B:
                            ++ptr0;
                            uint256 v116 = *ptr0;
                            ++ptr0;
                            *ptr0 = (uint256)(*ptr0 > v116);
                            *ptr0 = (uint256)(*ptr0 == 0x0);
                            --ptr0;
                            *ptr0 = 0xD6E;
                            ++ptr0;
                            /*BAD_CALL!*/ sub_D6E(*ptr0);
                            uint256 v117 = *(int256*)(ptr0 + 1);
                            --ptr0;
                            *ptr0 = v117;
                            uint256 v118 = *ptr0;
                            ++ptr0;
                            *ptr0 = *ptr0 & v118;
                            --ptr0;
                            *ptr0 = 0x34E9;
                            ++ptr0;
                            uint256 v119 = *ptr0;
                            ++ptr0;
                            if(!v119) {
                                goto loc_346C;
                            }
                            else {
                                --ptr0;
                                *ptr0 = 0x40;
                                *ptr0 = *0x40;
                                --ptr0;
                                *ptr0 = 0xA9059CBB;
                                --ptr0;
                                *ptr0 = 0xE0;
                                ++ptr0;
                                *ptr0 = *ptr0 << 0xE0;
                                uint256 v120 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v120;
                                int256* ptr5 = *ptr0;
                                ++ptr0;
                                *ptr5 = *ptr0;
                                *ptr0 = 0x1;
                                --ptr0;
                                *ptr0 = 0x1;
                                --ptr0;
                                *ptr0 = 0xA0;
                                ++ptr0;
                                *ptr0 = *ptr0 << 0xA0;
                                uint256 v121 = *ptr0;
                                ++ptr0;
                                *ptr0 = v121 - *ptr0;
                                uint256 v122 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + &loc_2);
                                *(int256*)(ptr0 + &loc_2) = v122;
                                uint256 v123 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + 1);
                                *(int256*)(ptr0 + 1) = v123;
                                uint256 v124 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + &loc_2);
                                *(int256*)(ptr0 + &loc_2) = v124;
                                uint256 v125 = *ptr0;
                                ++ptr0;
                                *ptr0 = *ptr0 & v125;
                                --ptr0;
                                *ptr0 = 0x4;
                                uint256 v126 = *(int256*)(ptr0 + &loc_2);
                                --ptr0;
                                *ptr0 = v126;
                                uint256 v127 = *ptr0;
                                ++ptr0;
                                *ptr0 = *ptr0 + v127;
                                int256* ptr6 = *ptr0;
                                ++ptr0;
                                *ptr6 = *ptr0;
                                *ptr0 = 0x24;
                                uint256 v128 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v128;
                                uint256 v129 = *ptr0;
                                ++ptr0;
                                *ptr0 = *ptr0 + v129;
                                uint256 v130 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + &loc_2);
                                *(int256*)(ptr0 + &loc_2) = v130;
                                uint256 v131 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + 1);
                                *(int256*)(ptr0 + 1) = v131;
                                uint256 v132 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + &loc_2);
                                *(int256*)(ptr0 + &loc_2) = v132;
                                int256* ptr7 = *ptr0;
                                ++ptr0;
                                uint256 v133 = *ptr0;
                                ++ptr0;
                                *ptr7 = v133;
                                uint256 v134 = *(int256*)(ptr0 + &loc_2);
                                --ptr0;
                                *ptr0 = v134;
                                uint256 v135 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v135;
                                --ptr0;
                                *ptr0 = 0x44;
                                uint256 v136 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v136;
                                --ptr0;
                                *ptr0 = 0x0;
                                uint256 v137 = *(int256*)(ptr0 + &loc_A);
                                --ptr0;
                                *ptr0 = v137;
                                v19 = gasleft();
                                --ptr0;
                                *ptr0 = v19;
                                uint256 v138 = *ptr0;
                                ++ptr0;
                                address v139 = *ptr0;
                                ++ptr0;
                                v5 = *ptr0;
                                ++ptr0;
                                v4 = *ptr0;
                                ++ptr0;
                                v3 = *ptr0;
                                ++ptr0;
                                uint256 v140 = *ptr0;
                                ++ptr0;
                                v31 = call(v138, v139, v5, v4, v3, v140, *ptr0);
                                *ptr0 = v31;
                                uint256 v141 = *ptr0;
                                --ptr0;
                                *ptr0 = (uint256)(*ptr0 == 0x0);
                                --ptr0;
                                *ptr0 = 0x3548;
                                ++ptr0;
                                uint256 v142 = *ptr0;
                                ++ptr0;
                                if(v142) {
                                    --ptr0;
                                    *ptr0 = 0x3550;
                                    --ptr0;
                                    *ptr0 = 0xC89;
                                    ++ptr0;
                                    /*BAD_CALL!*/ sub_C89();
                                    --ptr0;
                                    *ptr0 = 0x3520;
                                    ++ptr0;
                                }
                                --ptr0;
                                *ptr0 = 0x352B;
                                ++ptr0;
                                uint256 v143 = *ptr0;
                                ++ptr0;
                                if(v143) {
                                    --ptr0;
                                    *ptr0 = 0x3541;
                                    *ptr0 = *(int256*)(ptr0 + 1);
                                    *(int256*)(ptr0 + 1) = 0x3541;
                                    uint256 v144 = *(int256*)(ptr0 + 3);
                                    --ptr0;
                                    *ptr0 = v144;
                                    v32 = returndatasize();
                                    --ptr0;
                                    *ptr0 = v32;
                                    uint256 v145 = *(int256*)(ptr0 + &loc_5);
                                    --ptr0;
                                    *ptr0 = v145;
                                    uint256 v146 = *ptr0;
                                    ++ptr0;
                                    *ptr0 = (uint256)(*ptr0 < v146);
                                    --ptr0;
                                    *ptr0 = 0x1EC;
                                    ++ptr0;
                                    uint256 v147 = *ptr0;
                                    ++ptr0;
                                    if(!v147) {
                                        --ptr0;
                                        *ptr0 = 0x1E4;
                                        uint256 v148 = *(int256*)(ptr0 + 1);
                                        --ptr0;
                                        *ptr0 = v148;
                                        uint256 v149 = *(int256*)(ptr0 + 3);
                                        --ptr0;
                                        *ptr0 = v149;
                                        --ptr0;
                                        *ptr0 = 0xC5D;
                                        ++ptr0;
                                        /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                                        v33 = codesize();
                                        *ptr0 = v33;
                                        --ptr0;
                                        *ptr0 = 0x3525;
                                        ++ptr0;
                                    }
                                    else {
                                        v34 = returndatasize();
                                        *ptr0 = v34;
                                        --ptr0;
                                        *ptr0 = 0x1DA;
                                        ++ptr0;
                                        goto loc_1DB;
                                    }
                                }
                                uint256 v150 = *ptr0;
                                --ptr0;
                                --ptr0;
                                *ptr0 = 0x3469;
                                ++ptr0;
                                goto loc_346C;
                            loc_1DB:
                                --ptr0;
                                *ptr0 = 0x1E4;
                                uint256 v151 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v151;
                                uint256 v152 = *(int256*)(ptr0 + 3);
                                --ptr0;
                                *ptr0 = v152;
                                --ptr0;
                                *ptr0 = 0xC5D;
                                ++ptr0;
                                /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                                uint256 v153 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v153;
                                uint256 v154 = *ptr0;
                                ++ptr0;
                                *ptr0 = *ptr0 + v154;
                                uint256 v155 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + 1);
                                *(int256*)(ptr0 + 1) = v155;
                                --ptr0;
                                *ptr0 = 0xDE5;
                                ++ptr0;
                                uint256 v156 = *ptr0;
                                *ptr0 = *(int256*)(ptr0 + 1);
                                *(int256*)(ptr0 + 1) = v156;
                                uint256 v157 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v157;
                                --ptr0;
                                *ptr0 = 0x20;
                                *ptr0 = *(int256*)(ptr0 + &loc_2);
                                *(int256*)(ptr0 + &loc_2) = 0x20;
                                uint256 v158 = *ptr0;
                                ++ptr0;
                                *ptr0 = v158 - *ptr0;
                                v6 = *ptr0;
                                ++ptr0;
                                *ptr0 = (uint256)(*ptr0 > (int256)v6);
                                --ptr0;
                                *ptr0 = 0x29;
                                ++ptr0;
                                v0 = *ptr0;
                                ++ptr0;
                            }
                            if(v0) {
                                goto loc_2A;
                            }
                            else {
                                *ptr0 = **ptr0;
                                uint256 v159 = *ptr0;
                                --ptr0;
                                *ptr0 = (uint256)(*ptr0 == 0x0);
                                *ptr0 = (uint256)(*ptr0 == 0x0);
                                uint256 v160 = *(int256*)(ptr0 + 1);
                                --ptr0;
                                *ptr0 = v160;
                                v6 = *ptr0;
                                ++ptr0;
                                *ptr0 = v6 - *ptr0;
                                --ptr0;
                                *ptr0 = 0x29;
                                ++ptr0;
                                v7 = *ptr0;
                                ++ptr0;
                                if(v7) {
                                    goto loc_2A;
                                }
                                else {
                                    uint256 v161 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + 1);
                                    *(int256*)(ptr0 + 1) = v161;
                                    v6 = *ptr0;
                                    ++ptr0;
                                    jump v6;
                                loc_346C:
                                    ++ptr0;
                                    *ptr0 = 0x40;
                                    *ptr0 = *0x40;
                                    uint256 v162 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + 1);
                                    *(int256*)(ptr0 + 1) = v162;
                                    uint256 v163 = *(int256*)(ptr0 + 1);
                                    --ptr0;
                                    *ptr0 = v163;
                                    int256* ptr8 = *ptr0;
                                    ++ptr0;
                                    *ptr8 = *ptr0;
                                    v16 = v196;
                                    *ptr0 = v16;
                                    --ptr0;
                                    *ptr0 = 0x4;
                                    uint256 v164 = *(int256*)(ptr0 + &loc_2);
                                    --ptr0;
                                    *ptr0 = v164;
                                    uint256 v165 = *ptr0;
                                    ++ptr0;
                                    *ptr0 = *ptr0 + v165;
                                    int256* ptr9 = *ptr0;
                                    ++ptr0;
                                    uint256 v166 = *ptr0;
                                    ++ptr0;
                                    *ptr9 = v166;
                                    uint256 v167 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + &loc_4);
                                    *(int256*)(ptr0 + &loc_4) = v167;
                                    uint256 v168 = *(int256*)(ptr0 + &loc_4);
                                    --ptr0;
                                    *ptr0 = v168;
                                    uint256 v169 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + 1);
                                    *(int256*)(ptr0 + 1) = v169;
                                    --ptr0;
                                    *ptr0 = 0x24;
                                    *ptr0 = *(int256*)(ptr0 + 1);
                                    *(int256*)(ptr0 + 1) = 0x24;
                                    uint256 v170 = *(int256*)(ptr0 + &loc_2);
                                    --ptr0;
                                    *ptr0 = v170;
                                    uint256 v171 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + 1);
                                    *(int256*)(ptr0 + 1) = v171;
                                    v17 = gasleft();
                                    --ptr0;
                                    *ptr0 = v17;
                                    uint256 v172 = *ptr0;
                                    ++ptr0;
                                    address v173 = *ptr0;
                                    ++ptr0;
                                    v5 = *ptr0;
                                    ++ptr0;
                                    v4 = *ptr0;
                                    ++ptr0;
                                    v3 = *ptr0;
                                    ++ptr0;
                                    v34 = staticcall(v172, v173, v5, v4, v3, *ptr0);
                                    *ptr0 = v34;
                                    uint256 v174 = *ptr0;
                                    *ptr0 = *(int256*)(ptr0 + 3);
                                    *(int256*)(ptr0 + 3) = v174;
                                    uint256 v175 = *(int256*)(ptr0 + 3);
                                    --ptr0;
                                    *ptr0 = v175;
                                    *ptr0 = (uint256)(*ptr0 == 0x0);
                                    --ptr0;
                                    *ptr0 = 0x34DC;
                                    ++ptr0;
                                    uint256 v176 = *ptr0;
                                    ++ptr0;
                                    if(v176) {
                                        --ptr0;
                                        *ptr0 = 0x34E4;
                                        --ptr0;
                                        *ptr0 = 0xC89;
                                        ++ptr0;
                                        /*BAD_CALL!*/ sub_C89();
                                        --ptr0;
                                        *ptr0 = 0x3489;
                                        ++ptr0;
                                    }
                                    --ptr0;
                                    *ptr0 = 0x0;
                                    *ptr0 = *(int256*)(ptr0 + &loc_4);
                                    *(int256*)(ptr0 + &loc_4) = 0x0;
                                    --ptr0;
                                    *ptr0 = 0x34BB;
                                    ++ptr0;
                                    uint256 v177 = *ptr0;
                                    ++ptr0;
                                    if(!v177) {
                                    loc_3493:
                                        *ptr0 = 0x34AA;
                                        ++ptr0;
                                        uint256 v178 = *ptr0;
                                        ++ptr0;
                                        if(v178) {
                                            goto loc_34AB;
                                        }
                                        else {
                                            goto loc_3498;
                                        }
                                    }
                                    else {
                                        --ptr0;
                                        *ptr0 = 0x34D5;
                                        *ptr0 = *(int256*)(ptr0 + &loc_2);
                                        *(int256*)(ptr0 + &loc_2) = 0x34D5;
                                        uint256 v179 = *ptr0;
                                        *ptr0 = *(int256*)(ptr0 + &loc_4);
                                        *(int256*)(ptr0 + &loc_4) = v179;
                                        *ptr0 = 0x20;
                                        v18 = returndatasize();
                                        --ptr0;
                                        *ptr0 = v18;
                                        --ptr0;
                                        *ptr0 = 0x20;
                                        ++ptr0;
                                        *ptr0 = (uint256)(*ptr0 < 0x20);
                                        --ptr0;
                                        *ptr0 = 0x77A;
                                        ++ptr0;
                                        uint256 v180 = *ptr0;
                                        ++ptr0;
                                        if(!v180) {
                                            --ptr0;
                                            *ptr0 = 0x76C;
                                            uint256 v181 = *(int256*)(ptr0 + 1);
                                            --ptr0;
                                            *ptr0 = v181;
                                            uint256 v182 = *(int256*)(ptr0 + 3);
                                            --ptr0;
                                            *ptr0 = v182;
                                            --ptr0;
                                            *ptr0 = 0xC5D;
                                            ++ptr0;
                                            /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                                            uint256 v183 = *ptr0;
                                            *ptr0 = *(int256*)(ptr0 + &loc_2);
                                            *(int256*)(ptr0 + &loc_2) = v183;
                                            v34 = codesize();
                                            --ptr0;
                                            *ptr0 = v34;
                                            --ptr0;
                                            *ptr0 = 0x3491;
                                            ++ptr0;
                                            goto loc_3493;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    v34 = returndatasize();
                    *ptr0 = v34;
                    --ptr0;
                    *ptr0 = 0x762;
                    ++ptr0;
                    --ptr0;
                    *ptr0 = 0x76C;
                    uint256 v184 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v184;
                    uint256 v185 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v185;
                    --ptr0;
                    *ptr0 = 0xC5D;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                    uint256 v186 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v186;
                    uint256 v187 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v187;
                    uint256 v188 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v188;
                    --ptr0;
                    *ptr0 = 0xC96;
                    ++ptr0;
                    uint256 v189 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v189;
                    uint256 v190 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v190;
                    --ptr0;
                    *ptr0 = 0x20;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = 0x20;
                    uint256 v191 = *ptr0;
                    ++ptr0;
                    *ptr0 = v191 - *ptr0;
                    v6 = *ptr0;
                    ++ptr0;
                    *ptr0 = (uint256)(*ptr0 > (int256)v6);
                    --ptr0;
                    *ptr0 = 0x29;
                    ++ptr0;
                    v7 = *ptr0;
                    ++ptr0;
                    if(!v7) {
                        *ptr0 = **ptr0;
                        uint256 v192 = *ptr0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = v192;
                        v6 = *ptr0;
                        ++ptr0;
                        jump v6;
                    }
                }
            }
        }

    loc_2A:
        --ptr0;
        *ptr0 = 0x0;
        --ptr0;
        *ptr0 = 0x0;
        ++ptr0;
        v7 = *ptr0;
        ++ptr0;
        revert(0x0, v7);
    loc_3498:
        uint256 v193 = *ptr0;
        --ptr0;
        --ptr0;
        *ptr0 = 0x34A0;
        ++ptr0;
        v7 = *ptr0;
        ++ptr0;
        if(!v7) {
            ptr0 += &loc_2;
            v6 = *ptr0;
            ++ptr0;
            jump v6;
        }

        --ptr0;
        *ptr0 = 0xA4D;
        *ptr0 = *(int256*)(ptr0 + &loc_2);
        *(int256*)(ptr0 + &loc_2) = 0xA4D;
        uint256 v194 = *ptr0;
        ++ptr0;
        *ptr0 = (uint256)(*ptr0 < v194);
        --ptr0;
        *ptr0 = 0xD6E;
        ++ptr0;
        /*BAD_CALL!*/ sub_D6E(*ptr0);
    loc_34AB:
        --ptr0;
        *ptr0 = 0x34B6;
        uint256 v195 = *(int256*)(ptr0 + &loc_2);
        --ptr0;
        *ptr0 = v195;
        --ptr0;
        *ptr0 = 0x382;
        --ptr0;
        *ptr0 = 0xDFD;
        ++ptr0;
        /*BAD_CALL!*/ sub_DFD();
        --ptr0;
        *ptr0 = 0x3497;
        ++ptr0;
        goto loc_3498;
    }

    function sub_BF0() private pure {
        *0x0 = 0x4E487B7100000000000000000000000000000000000000000000000000000000;
        *0x4 = 0x41;
        revert(0x0, 0x24);
    }

    function sub_C07(uint256 param0) private pure {
        uint256 v0;

        if(param0 <= 0xFFFFFFFFFFFFFFFF) {
            *0x40 = param0;
            return;
        }

        sub_BF0();
        *0x40 = param0;
        jump v0;
    }

    function sub_C27(uint256 param0) private pure {
        uint256 v0, v1 = param0;

        param0 += 0x40;
        if(!((uint256)(param0 < v1) | (uint256)(param0 > 0xFFFFFFFFFFFFFFFF))) {
            *0x40 = param0;
            return;
        }

        sub_BF0();
        *0x40 = param0;
        jump v0;
    }

    function sub_C42(uint256 param0) private pure {
        uint256 v0, v1 = param0;

        param0 += 0x60;
        if(!((uint256)(param0 < v1) | (uint256)(param0 > 0xFFFFFFFFFFFFFFFF))) {
            *0x40 = param0;
            return;
        }

        sub_BF0();
        *0x40 = param0;
        jump v0;
    }

    function sub_C5D(uint256 param0, uint256 param1) private pure {
        uint256 v0;

        param0 = ((param0 + 0x1F) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0) + param1;
        if(!((uint256)(param0 < param1) | (uint256)(param0 > 0xFFFFFFFFFFFFFFFF))) {
            *0x40 = param0;
            return;
        }

        sub_BF0();
        *0x40 = param0;
        jump v0;
    }

    function sub_C7E() {
        // Decompilation error
    }

    function sub_C89() private pure {
        uint256 v0;
        uint256 v1 = *0x40;

        v0 = returndatasize();
        returndatacopy(v1, 0x0, v0);
        v0 = returndatasize();
        revert(v1, v0);
    }

    function sub_CA5() private pure returns (uint256) {
        /*BAD_CALL!*/ sub_C27(*0x40);
    }

    function sub_CB2() private pure returns (uint256) {
        uint256 result, v0 = result;

        result = *0x40;
        if(!((uint256)(result + 0xA0 < result) | (uint256)(result + 0xA0 > 0xFFFFFFFFFFFFFFFF))) {
            *0x40 = result + 0xA0;
            return result;
        }

        sub_BF0();
        *0x40 = result + 0xA0;
        jump v0;
    }

    function sub_CD1(uint256 param0) private pure returns (uint256) {
        if(param0 > 0xFFFFFFFFFFFFFFFF) {
            sub_BF0();
        }

        return ((param0 + 0x1F) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0) + 0x20;
    }

    function sub_CFB() private pure {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0x1A;
        *(uint256*)(v0 + 0x20) = 0x7374617274696E6742616C616E6365576974686F757446656573000000000000;
    }

    function sub_D34() private pure {
        *0x0 = 0x4E487B7100000000000000000000000000000000000000000000000000000000;
        *0x4 = 0x11;
        revert(0x0, 0x24);
    }

    function sub_D4B() {
        // Decompilation error
    }

    function sub_D61() {
        // Decompilation error
    }

    function sub_D6E() {
        // Decompilation error
    }

    function sub_DA0() {
        // Decompilation error
    }

    function sub_DAF() {
        // Decompilation error
    }

    function sub_DBC() private pure {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0xD;
        *(uint256*)(v0 + 0x20) = 0x656E64696E6742616C616E636500000000000000000000000000000000000000;
    }

    function sub_DFD() private pure {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0xE;
        *(uint256*)(v0 + 0x20) = 0x7265616C697A656450726F666974000000000000000000000000000000000000;
    }

    function sub_E27() {
        // Decompilation error
    }

    function sub_E5F() private pure returns (uint256) {
        uint256 v0, v1;

        v0 = returndatasize();
        if(v0 == 0x0) {
            return 0x60;
        }

        v0 = returndatasize();
        uint256 v2 = sub_CD1(v0);
        uint256 result = *0x40;
        sub_C5D(result, v2);
        *(uint256*)result = v0;
        v1 = returndatasize();
        returndatacopy(result + 0x20, 0x0, v1);
        return result;
    }

    function sub_E8F() private pure returns (uint256) {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0x19;
        *(int256*)(v0 + 0x20) = 0x7472616E7366657228616464726573732C75696E743235362900000000000000;
        return 0xA9059CBB00000000000000000000000000000000000000000000000000000000;
    }

    function sub_ECF() private pure {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0xE;
        *(uint256*)(v0 + 0x20) = 0x657870656374656450726F666974000000000000000000000000000000000000;
    }

    function sub_F54() private pure {
        int256* ptr0;
        uint256 v0, v1, v2;

        if(v1 != 0x0) {
            ptr0 = &v2;
            jump v2;
        }

        *0x0 = 0x4E487B7100000000000000000000000000000000000000000000000000000000;
        *0x4 = 0x12;
        ptr0 = &v0;
        revert(0x0, 0x24);
    }

    function sub_F8C(uint256 param0, uint256 param1, uint256 param2) private pure returns (uint256) {
        uint256 result;

        if(((uint256)(param1 * param2 / param2 == param1) | (uint256)(param2 == 0x0)) == 0x0) {
            /*BAD_CALL!*/ sub_D34();
        }
        else {
            return result;
        }
    }

    function sub_F9F() private pure {
        *0x0 = 0x4E487B7100000000000000000000000000000000000000000000000000000000;
        *0x4 = 0x21;
        revert(0x0, 0x24);
    }

    function sub_FB6() {
        // Decompilation error
    }

    function sub_FC8() {
        // Decompilation error
    }

    function sub_FE4() private pure {
        int256* ptr0;
        uint256 v0, v1, v2, v3, v4 = v0;

        v0 = v3;
        v3 = v4;
        v2 = calldataload(v4);
        uint256 v5 = (uint256)(v2 >= 0x9);
        uint256 v6 = 0x108E;
        if((uint256)(v2 >= 0x9)) {
            v6 = 0xF9F;
            sub_F9F();
            v5 = 0xFF3;
        }

        if(v2 == 0x4) {
            uint256 v7 = v0;
            v0 = 0x33B2E3C9FD0803CE8000000;
            uint256 v8 = 0x33B2E3C9FD0803CE8000000;
            *(&v8 - 1) = 0x103C;
            *(&v8 - &loc_2) = 0x1014;
            *(&v8 - 3) = *(&v8 + 3);
            *(&v8 - &loc_4) = 0x3696;
            *(uint256*)(&v8 - &loc_2) = /*BAD_CALL!*/ sub_3696(*(uint256*)(&v8 - 3));
            uint256 v9 = *(&v8 - 3);
            *(&v8 - 3) = *(&v8 - 1);
            *(&v8 - 1) = v9;
            *(&v8 - &loc_4) = 0x40B;
            *(&v8 - &loc_5) = 0x40;
            *(&v8 - 6) = *(&v8 + &loc_2);
            *(&v8 - &loc_5) = *(&v8 - &loc_5) + *(&v8 - 6);
            v1 = calldataload(*(&v8 - &loc_5));
            *(&v8 - &loc_5) = v1;
            uint256 v10 = *(&v8 - &loc_5);
            *(&v8 - &loc_5) = *(&v8 - 1);
            *(&v8 - 1) = v10;
            *(&v8 - 6) = *(&v8 - 1);
            uint256 v11 = *(&v8 - 6);
            *(&v8 - 6) = *(&v8 - 3);
            *(&v8 - 3) = v11;
            *(&v8 - &loc_7) = 0x2540BE400;
            *(&v8 - &loc_7) = *(&v8 - 6);
            *(&v8 - 6) = 0x2540BE400;
            *(&v8 - &loc_8) = 0x2540BE400;
            *(&v8 - &loc_9) = *(&v8 - &loc_7);
            *(&v8 - &loc_8) = *(&v8 - &loc_8) * *(&v8 - &loc_9);
            uint256 v12 = *(&v8 - &loc_8);
            *(&v8 - &loc_8) = *(&v8 - 6);
            *(&v8 - 6) = v12;
            *(&v8 - &loc_9) = *(&v8 - &loc_7);
            *(&v8 - &loc_A) = *(&v8 - 6);
            *(uint256*)(&v8 - &loc_9) = *(uint256*)(&v8 - &loc_A) / *(uint256*)(&v8 - &loc_9);
            *(&v8 - &loc_8) = (uint256)(*(&v8 - &loc_8) == *(&v8 - &loc_9));
            uint256 v13 = *(&v8 - &loc_8);
            *(&v8 - &loc_8) = *(&v8 - &loc_7);
            *(&v8 - &loc_7) = v13;
            *(&v8 - &loc_8) = (uint256)(*(&v8 - &loc_8) == 0x0);
            *(&v8 - &loc_7) = *(&v8 - &loc_7) | *(&v8 - &loc_8);
            *(&v8 - &loc_7) = (uint256)(*(&v8 - &loc_7) == 0x0);
            *(&v8 - &loc_8) = 0x1067;
            if(!*(&v8 - &loc_7)) {
                *(&v8 - &loc_7) = 0xF54;
                ptr0 = &v8 - 6;
                /*BAD_CALL!*/ sub_F54();
            }
            *(&v8 - &loc_7) = 0x40B;
            *(&v8 - &loc_8) = 0xD34;
            ptr0 = &v8 - &loc_7;
            /*BAD_CALL!*/ sub_D34();
        }

        sub_36C8(v4);
    }

    function sub_109B() {
        // Decompilation error
    }

    function sub_10FF() {
        // Decompilation error
    }

    function sub_1132() private pure returns (uint256) {
        uint256 result = *0x40;

        sub_C42(result);
        *(uint256*)result = 0x2D;
        *(int256*)(result + 0x20) = 0x43616E6E6F7420626F72726F772066726F6D206669727374206D61726B65742E;
        *(uint256*)(result + 0x40) = 0x205573696E672077616C6C657400000000000000000000000000000000000000;
        return result;
    }

    function sub_11A7() private pure returns (uint256) {
        uint256 v0, result, v1 = result;

        result = *0x40;
        sub_C27(result);
        *(uint256*)result = 0x1;
        uint256 v2 = v1, v3 = 0x0;
        do {
            v0 = v3;
            v3 = 0x20;
            uint256 v4 = v0;
            v0 = v2;
            v2 = v4;
            uint256 v5 = *(uint256*)result;
            sub_C27(v5);
            *(uint256*)v5 = 0x20;
            *(uint256*)(v5 + 0xC27) = 0x20;
            *(uint256*)(result + 0x1E01) = v5;
            v0 += 0x11DA;
        }
        while(v0 < 0x20);

        return result;
    }

    function sub_11F6() {
        // Decompilation error
    }

    function sub_123D() private pure {
        *0x0 = 0x4E487B7100000000000000000000000000000000000000000000000000000000;
        *0x4 = 0x32;
        revert(0x0, 0x24);
    }

    function sub_1254(uint256 param0, void param1, uint256* param2) private pure {
        if(*param2 == 0x0) {
            /*BAD_CALL!*/ sub_123D();
        }
        else {
            return;
        }
    }

    function sub_126A(uint256 param0, void param1, uint256* param2) private pure {
        if((uint256)*param2 > 0x1) {
            return;
        }

        /*BAD_CALL!*/ sub_123D();
    }

    function sub_12AC(uint256* param0, uint256* param1, uint256* param2) private pure returns (uint256) {
        *param0 = param1;
        calldatacopy(param0 + 1, param2, param1);
        *((uint256*)((int256)param0 + (int256)param1) + 1) = 0x0;
        return (uint256)((uint256*)((int256)(uint256*)((int256)(uint256*)((char*)param1 + 0x1F) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0) + (int256)param0) + 1);
    }

    function sub_13C8() {
        // Decompilation error
    }

    function sub_13EB(uint256 param0, uint256 param1) private pure returns (uint256) {
        uint256 v0 = *(uint256*)param1;

        *(uint256*)param0 = *(uint256*)param1;
        sub_13C8(param1 + 0x20, param0 + 0x20, v0);
        return ((v0 + 0x1F) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0) + param0 + 0x20;
    }

    function sub_1687() {
        // Decompilation error
    }

    function sub_16A2(uint256 param0, uint256 param1, uint256 param2, uint256 param3) private pure returns (uint256) {
        uint256 v0, v1;
        uint256* ptr0;
        uint256 v2, v3, v4, v5, v6, v7, v8, v9;
        address v10;
        uint256 v11, v12, v13;

        v12 = calldataload(param2);
        uint256 v14 = v13;
        v13 = v12 + param2;
        uint256 v15 = v14;
        v14 = param3;
        param3 = v15;
        uint256 v16 = param2;
        param2 = 0x20;
        uint256 v17 = v16, v18 = v14;
        v16 = param1;
        v8 = calldataload(v17 + 0x20);
        v7 = calldataload(v8 + v17 + 0x40);
        if(v7 == 0x186A0) {
            v7 = calldataload(v13);
            /*BAD_CALL!*/ sub_FB6(v7);
            if(!v7) {
                uint256 v19 = *0x40;
                /*BAD_CALL!*/ sub_1687();
                v6 = v17 - v18;
                *(uint256*)0x16EE = v6 - 0x20;
                /*BAD_CALL!*/ sub_C5D(0x16EE, v6);
                /*BAD_CALL!*/ sub_36C8(v19);
                v5 = 0x0;
                v7 = calldataload(0x60);
                /*BAD_CALL!*/ sub_3696(0x0);
                v4 = 0x0;
                /*BAD_CALL!*/ sub_109B(0x16FC, 0x0);
                v3 = v19 + param0;
                /*BAD_CALL!*/ sub_21BF(v3);
                v2 = *0x40;
                *(uint256*)v2 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
                *(int256*)(v2 + 0x4) = address(v4);
                ptr0 = &v3;
                jump v5;
            }
            /*BAD_CALL!*/ sub_FB6(v7);
            if(v7 == 0x8) {
                v14 = param0;
                uint256 v20 = 0x16EE;
                param1 = 0x183C;
                uint256 v21 = param0, v22 = v16;
                v16 = 0x1836;
                uint256 v23 = *0x40;
                v6 = v18;
                param0 = v23;
                uint256 v24 = v23;
                /*BAD_CALL!*/ sub_1687();
                v9 = calldataload(v23 + 0x60);
                v3 = 0x3623;
                v2 = /*BAD_CALL!*/ sub_3623(v23);
                uint256 v25 = 0x44DA;
                /*BAD_CALL!*/ sub_379D(0x40);
                uint256 v26 = v22;
                v22 = (uint256)(v9 == 0x0);
                if((address(v22)) == 0x0) {
                    v1 = v26 == 0x0 ? 0xFFFD8963EFD1FC6A506488495D951D5263988D25: 0x1000276A4;
                    v22 = v1;
                }
                uint256 v27 = v26;
                v5 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
                v26 = 0x0;
                v4 = 0x4511;
                uint256 v28 = *(uint256*)v21;
                uint256 v29 = 0x16EE;
                v20 = v28;
                v2 = v22;
                v22 = v28;
                address v30 = (address)0x44DA;
                v25 = v28;
                v3 = v27;
                v1 = v28;
                *(uint256*)v1 = 0x128ACB0800000000000000000000000000000000000000000000000000000000;
                v10 = v48;
                uint256 v31 = (uint256)v10;
                uint256 v32 = v1 + 0x4;
                uint256 v33 = 0x4367;
                /*BAD_CALL!*/ sub_4367();
                uint256 v34 = (uint256)(v10 - v3);
                v30 &= v4;
                v11 = gasleft();
                v3 = v11;
                v7 = call(v11, v30, v2, v29, v34, v1, v5);
                v5 = v26;
                v26 = v7;
                v1 = v7;
                v4 = 0x4542;
                ptr0 = &v5;
                if(v1) {
                    v1 = v5;
                    v5 = 0x4559;
                    v7 = returndatasize();
                    if(v7 >= 0x40) {
                        v3 = 0xC5D;
                        /*BAD_CALL!*/ sub_C5D(v1, 0x40);
                    }
                    else {
                        v7 = returndatasize();
                        v3 = 0xC5D;
                        /*BAD_CALL!*/ sub_C5D(v1, v7);
                        v29 = v1;
                        uint256 v35 = v7 + v29;
                        v5 = v1;
                        v1 = 0x4559;
                        v2 = v35;
                        if((int256)(v2 - v5) < 0x40) {
                            ptr0 = &v1;
                            revert(0x0, 0x0);
                            return 0x0;
                        }
                        v4 = 0x20;
                        uint256 v36 = *(uint256*)v5;
                        v29 = v5;
                        v5 = v36;
                        v1 = *(uint256*)(v29 + 0x20);
                    }
                    v4 = 0x451D;
                    ptr0 = &v1;
                }
                *ptr0 = 0x453D;
                ++ptr0;
                uint256 v37 = *ptr0;
                ++ptr0;
                if(!v37) {
                    --ptr0;
                    *ptr0 = 0x452A;
                    --ptr0;
                    *ptr0 = 0xE5F;
                    ++ptr0;
                    *ptr0 = /*BAD_CALL!*/ sub_E5F();
                    --ptr0;
                    *ptr0 = 0x4533;
                    uint256 v38 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v38;
                    --ptr0;
                    *ptr0 = 0x3DB3;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_3DB3();
                    --ptr0;
                    *ptr0 = 0x3D3C;
                    ++ptr0;
                    v37 = *ptr0;
                    ++ptr0;
                    if(!v37) {
                        *ptr0 = 0x0;
                        *ptr0 = *(int256*)(ptr0 + 1);
                        *(int256*)(ptr0 + 1) = 0x0;
                        v0 = *ptr0;
                        ++ptr0;
                        jump v0;
                    }
                    --ptr0;
                    *ptr0 = 0x40;
                    *ptr0 = *0x40;
                    --ptr0;
                    *ptr0 = 0x461BCD;
                    --ptr0;
                    *ptr0 = 0xE5;
                    ++ptr0;
                    *ptr0 = *ptr0 << 0xE5;
                    uint256 v39 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v39;
                    int256* ptr1 = *ptr0;
                    ++ptr0;
                    uint256 v40 = *ptr0;
                    ++ptr0;
                    *ptr1 = v40;
                    uint256 v41 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v41;
                    uint256 v42 = *(int256*)(ptr0 + 1);
                    --ptr0;
                    *ptr0 = v42;
                    uint256 v43 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v43;
                    --ptr0;
                    *ptr0 = 0x3D5B;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = 0x3D5B;
                    --ptr0;
                    *ptr0 = 0x44;
                    ++ptr0;
                    *ptr0 = *ptr0 + 0x44;
                    --ptr0;
                    *ptr0 = 0x4;
                    uint256 v44 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v44;
                    uint256 v45 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v45;
                    --ptr0;
                    *ptr0 = 0x3C2B;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_3C2B();
                    uint256 v46 = *ptr0;
                    ++ptr0;
                    *ptr0 = v46 - *ptr0;
                    uint256 v47 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v47;
                    v0 = *ptr0;
                    ++ptr0;
                    v37 = *ptr0;
                    ++ptr0;
                    revert(v0, v37);
                }
                --ptr0;
                *ptr0 = 0x1;
                *ptr0 = *(int256*)(ptr0 + 1);
                *(int256*)(ptr0 + 1) = 0x1;
                v0 = *ptr0;
                ++ptr0;
                jump v0;
            }
        }

        return 0x0;
    }

    function sub_184D() private pure returns (uint256) {
        uint256 result = *0x40;

        sub_C27(result);
        *(uint256*)result = 0x13;
        *(uint256*)(result + 0x20) = 0x5F72756E54726164657346726F6D496E64657800000000000000000000000000;
        return result;
    }

    function sub_187C() private pure {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0x7;
        *(uint256*)(v0 + 0x20) = 0x7472616465202300000000000000000000000000000000000000000000000000;
    }

    function sub_189F(uint256 param0, uint256 param1, uint256 param2) private view returns (uint256) {
        uint256 v0, v1, v2, v3;
        address v4;
        uint256 v5, v6, v7, v8 = param0;

        param0 = param2;
        param2 = v7;
        uint256 v9 = param0;
        param0 = param1;
        param1 = v9;
        uint256 v10 = v8;
        v7 = 0x0;
        uint256 v11 = 0x0, v12 = 0x19B7;
        *(&v10 - 1) = *&v10;
        v6 = calldataload(*(&v10 - 1));
        *(&v10 - 1) = v6;
        *(&v10 - &loc_2) = *&v10;
        *(&v10 - 1) = *(&v10 - 1) + *(&v10 - &loc_2);
        *(&v10 - &loc_2) = *(&v10 - 1);
        v1 = calldataload(*(&v10 - &loc_2));
        *(&v10 - &loc_2) = v1;
        *(&v10 - 3) = 0x18D9;
        *(&v10 - &loc_4) = *(&v10 - &loc_2);
        *(&v10 - &loc_5) = 0xFB6;
        /*BAD_CALL!*/ sub_FB6(*(uint256*)(&v10 - &loc_4));
        *(&v10 - &loc_4) = (uint256)(*(&v10 - &loc_4) == 0x0);
        *(&v10 - &loc_5) = 0x1992;
        uint256* ptr0 = (uint256*)(&v10 - 3);
        if(*(&v10 - &loc_4)) {
            uint256 v13 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 3);
            *(int256*)(ptr0 + 3) = v13;
            --ptr0;
            *ptr0 = 0x19B1;
            *ptr0 = *(int256*)(ptr0 + 1);
            *(int256*)(ptr0 + 1) = 0x19B1;
            --ptr0;
            *ptr0 = 0x19A0;
            uint256 v14 = *(int256*)(ptr0 + &loc_5);
            --ptr0;
            *ptr0 = v14;
            --ptr0;
            *ptr0 = 0x36C8;
            ++ptr0;
            *(ptr0 + 1) = /*BAD_CALL!*/ sub_36C8(*ptr0);
            uint256 v15 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 1);
            *(int256*)(ptr0 + 1) = v15;
            --ptr0;
            *ptr0 = 0x40;
            uint256 v16 = *(int256*)(ptr0 + 6);
            --ptr0;
            *ptr0 = v16;
            uint256 v17 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 + v17;
            v5 = calldataload(*ptr0);
            *ptr0 = v5;
            uint256 v18 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + &loc_2);
            *(int256*)(ptr0 + &loc_2) = v18;
            --ptr0;
            *ptr0 = 0x20;
            uint256 v19 = *(int256*)(ptr0 + &loc_7);
            --ptr0;
            *ptr0 = v19;
            uint256 v20 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 + v20;
            v1 = calldataload(*ptr0);
            *ptr0 = v1;
            --ptr0;
            *ptr0 = 0x2D5E;
            ++ptr0;
            *(ptr0 + &loc_4) = /*BAD_CALL!*/ sub_2D5E(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2), *(ptr0 + 3));
            uint256 v21 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 3);
            *(int256*)(ptr0 + 3) = v21;
            --ptr0;
            *ptr0 = 0x18DF;
            ++ptr0;
        }

        uint256 v22 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + &loc_2);
        *(int256*)(ptr0 + &loc_2) = v22;
        uint256 v23 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + 1);
        *(int256*)(ptr0 + 1) = v23;
        --ptr0;
        *ptr0 = 0x0;
        *ptr0 = *(int256*)(ptr0 + 6);
        *(int256*)(ptr0 + 6) = 0x0;
        uint256 v24 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + &loc_4);
        *(int256*)(ptr0 + &loc_4) = v24;
        uint256 v25 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + &loc_5);
        *(int256*)(ptr0 + &loc_5) = v25;
        uint256 v26 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + 6);
        *(int256*)(ptr0 + 6) = v26;
        uint256 v27 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + 3);
        *(int256*)(ptr0 + 3) = v27;
        while(1) {
            uint256 v28 = *(int256*)(ptr0 + &loc_2);
            --ptr0;
            *ptr0 = v28;
            uint256 v29 = *(int256*)(ptr0 + &loc_4);
            --ptr0;
            *ptr0 = v29;
            uint256 v30 = *ptr0;
            ++ptr0;
            *ptr0 = (uint256)(*ptr0 > v30);
            --ptr0;
            *ptr0 = 0x18F8;
            ++ptr0;
            uint256 v31 = *ptr0;
            ++ptr0;
            if(!v31) {
                break;
            }
            else {
                uint256 v32 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + 1);
                *(int256*)(ptr0 + 1) = v32;
                uint256 v33 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + &loc_2);
                *(int256*)(ptr0 + &loc_2) = v33;
                uint256 v34 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + 3);
                *(int256*)(ptr0 + 3) = v34;
                uint256 v35 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + &loc_4);
                *(int256*)(ptr0 + &loc_4) = v35;
                uint256 v36 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + 6);
                *(int256*)(ptr0 + 6) = v36;
                uint256 v37 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + &loc_5);
                *(int256*)(ptr0 + &loc_5) = v37;
                --ptr0;
                *ptr0 = 0x1936;
                --ptr0;
                *ptr0 = 0x1;
                *ptr0 = *(int256*)(ptr0 + &loc_2);
                *(int256*)(ptr0 + &loc_2) = 0x1;
                uint256 v38 = *(int256*)(ptr0 + &loc_8);
                --ptr0;
                *ptr0 = v38;
                --ptr0;
                *ptr0 = 0x1981;
                ++ptr0;
                uint256 v39 = *ptr0;
                ++ptr0;
                if(v39) {
                    --ptr0;
                    *ptr0 = 0x198D;
                    uint256 v40 = *(int256*)(ptr0 + &loc_7);
                    --ptr0;
                    *ptr0 = v40;
                    --ptr0;
                    *ptr0 = 0x382;
                    --ptr0;
                    *ptr0 = 0x187C;
                    ++ptr0;
                    /*BAD_CALL!*/ sub_187C();
                    --ptr0;
                    *ptr0 = 0x190A;
                    ++ptr0;
                }
                uint256 v41 = *(int256*)(ptr0 + &loc_5);
                --ptr0;
                *ptr0 = v41;
                --ptr0;
                *ptr0 = 0x1914;
                uint256 v42 = *(int256*)(ptr0 + &loc_8);
                --ptr0;
                *ptr0 = v42;
                --ptr0;
                *ptr0 = 0xD4B;
                ++ptr0;
                *(ptr0 + 1) = /*BAD_CALL!*/ sub_D4B(*ptr0);
                uint256 v43 = *ptr0;
                ++ptr0;
                *ptr0 = v43 - *ptr0;
                --ptr0;
                *ptr0 = 0x1942;
                ++ptr0;
                v31 = *ptr0;
                ++ptr0;
                if(!v31) {
                    uint256 v44 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v44;
                    v4 = v70;
                    --ptr0;
                    *ptr0 = v4;
                    --ptr0;
                    *ptr0 = 0x40;
                    uint256 v45 = *(int256*)(ptr0 + &loc_2);
                    --ptr0;
                    *ptr0 = v45;
                    uint256 v46 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v46;
                    v2 = calldataload(*ptr0);
                    *ptr0 = v2;
                    uint256 v47 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 3);
                    *(int256*)(ptr0 + 3) = v47;
                    --ptr0;
                    *ptr0 = 0x20;
                    uint256 v48 = *(int256*)(ptr0 + 3);
                    --ptr0;
                    *ptr0 = v48;
                    uint256 v49 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v49;
                    v3 = calldataload(*ptr0);
                    *ptr0 = v3;
                    uint256 v50 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 3);
                    *(int256*)(ptr0 + 3) = v50;
                    uint256 v51 = *(int256*)(ptr0 + &loc_A);
                    --ptr0;
                    *ptr0 = v51;
                    --ptr0;
                    *ptr0 = 0x5;
                    ++ptr0;
                    *ptr0 = *ptr0 << 0x5;
                    uint256 v52 = *(int256*)(ptr0 + &loc_9);
                    --ptr0;
                    *ptr0 = v52;
                    uint256 v53 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v53;
                    v1 = calldataload(*ptr0);
                    *ptr0 = v1;
                    uint256 v54 = *(int256*)(ptr0 + &loc_9);
                    --ptr0;
                    *ptr0 = v54;
                    uint256 v55 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v55;
                    --ptr0;
                    *ptr0 = 0x23F9;
                    ++ptr0;
                    *(ptr0 + 6) = /*BAD_CALL!*/ sub_23F9(*ptr0, *(ptr0 + 1), *(ptr0 + &loc_2), *(ptr0 + 3), *(ptr0 + &loc_4), *(ptr0 + &loc_5));
                    uint256 v56 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 6);
                    *(int256*)(ptr0 + 6) = v56;
                    uint256 v57 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_7);
                    *(int256*)(ptr0 + &loc_7) = v57;
                    uint256 v58 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_5);
                    *(int256*)(ptr0 + &loc_5) = v58;
                    uint256 v59 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v59;
                    uint256 v60 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 3);
                    *(int256*)(ptr0 + 3) = v60;
                    uint256 v61 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + &loc_2);
                    *(int256*)(ptr0 + &loc_2) = v61;
                    uint256 v62 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v62;
                    --ptr0;
                    *ptr0 = 0x18E9;
                    ++ptr0;
                }
                else {
                    --ptr0;
                    *ptr0 = 0x1959;
                    --ptr0;
                    *ptr0 = 0x194E;
                    uint256 v63 = *(int256*)(ptr0 + &loc_8);
                    --ptr0;
                    *ptr0 = v63;
                    --ptr0;
                    *ptr0 = 0xD4B;
                    ++ptr0;
                    *(ptr0 + 1) = /*BAD_CALL!*/ sub_D4B(*ptr0);
                    --ptr0;
                    *ptr0 = 0x5;
                    ++ptr0;
                    *ptr0 = *ptr0 << 0x5;
                    uint256 v64 = *(int256*)(ptr0 + 6);
                    --ptr0;
                    *ptr0 = v64;
                    uint256 v65 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v65;
                    v1 = calldataload(*ptr0);
                    *ptr0 = v1;
                    uint256 v66 = *(int256*)(ptr0 + 6);
                    --ptr0;
                    *ptr0 = v66;
                    uint256 v67 = *ptr0;
                    ++ptr0;
                    *ptr0 = *ptr0 + v67;
                    uint256 v68 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v68;
                    v0 = *ptr0;
                    ++ptr0;
                    jump v0;
                }
            }
        }

        ptr0 += &loc_5;
        uint256 v69 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + 1);
        *(int256*)(ptr0 + 1) = v69;
        v0 = *ptr0;
        ++ptr0;
        jump v0;
    }

    function sub_19CC() {
        // Decompilation error
    }

    function sub_1B01() {
        // Decompilation error
    }

    function sub_1B91() {
        // Decompilation error
    }

    function sub_1C1C() private pure returns (uint256) {
        uint256 result = *0x40;

        sub_C27(result);
        *(uint256*)result = 0x16;
        *(uint256*)(result + 0x20) = 0x51756F7465206D61726B657420616D6F756E7420696E00000000000000000000;
        return result;
    }

    function sub_1C4E() private pure returns (uint256) {
        uint256 result = *0x40;

        sub_C27(result);
        *(uint256*)result = 0x9;
        *(uint256*)(result + 0x20) = 0x616D6F756E744F75740000000000000000000000000000000000000000000000;
        return result;
    }

    function sub_1C73(uint256 param0, uint256 param1, uint256 param2) private view returns (uint256) {
        uint256 v0;
        uint256* ptr0;
        int256* ptr1;
        uint256 v1, v2, v3;
        address v4;
        uint256 v5, v6, v7, result, v8 = param0;

        param0 = result;
        result = param2;
        uint256 v9 = param0;
        param0 = v8;
        param2 = v9;
        uint256 v10 = param1;
        param1 = 0x0;
        v7 = calldataload(param0);
        uint256 v11 = v7;
        /*BAD_CALL!*/ sub_FB6(v7);
        if(result == 0x0) {
            return 0x0;
        }

        uint256 v12 = v10;
        v10 = result;
        uint256 v13 = v12;
        v12 = v11;
        if(v12 < 0x3) {
            /*BAD_CALL!*/ sub_3696(param0);
            sub_36C8(param2);
            return result;
        }

        if(v12 == 0x4) {
            /*BAD_CALL!*/ sub_3623(param0);
            v7 = calldataload(v10 + param0);
            v11 = (uint256)(v7 == 0x0);
            if(v11 == 0x0) {
                v12 = 0x0;
                v11 = 0x1;
            }
            else {
                v12 = v11;
                v11 = param2;
            }
            if(v12 == 0x0) {
                v12 = v11;
                v11 = param2;
            }
            else {
                v12 = v11;
                v11 = 0x1;
            }
            uint256 v14 = *0x40;
            v4 = (address)0x0;
            v3 = 0x20;
            v2 = v11;
            v1 = v12;
            v12 = v14;
            *(uint256*)v12 = 0x556D6E9F00000000000000000000000000000000000000000000000000000000;
            ptr1 = (int256*)(v12 + 0x4);
            uint256 v15 = 0xFF, v16 = v1;
            v1 = 0x40;
            uint256 v17 = v16;
            v16 = v3;
            v3 = (uint256)v4;
            uint256 v18 = v16;
            v16 = v2;
            v2 = v18;
            *ptr1 = v17 & 0xFF;
            *(ptr1 + 1) = v16 & v15;
            *(uint256*)(uint256)((int256)ptr1 + v1) = v2;
            ptr0 = &v4;
            jump v3;
        }

        v4 = (address)(v12 == 0x5);
        v2 = 0x2047;
        if(v4 == 0x0) {
            v4 = (address)(v12 == 0x3);
        }

        if(v4 != 0x0) {
            /*BAD_CALL!*/ sub_3623(param0);
            /*BAD_CALL!*/ sub_36FD();
            ptr0 = &v4;
            jump 0x1e1d;
        }

        uint256 v19 = v12;
        v12 = param0;
        param0 = v10;
        uint256 v20 = v12;
        v12 = v13;
        v13 = v20;
        uint256 v21 = v12;
        v12 = v19;
        v10 = v21;
        v4 = (address)(v12 - 0x6);
        v3 = 0x1F17;
        if(!v4) {
            uint256 v22 = v13;
            v13 = v10;
            v11 = v22;
            v12 = 0x20;
            v4 = 0x1E8C;
            v10 = 0x40;
            /*BAD_CALL!*/ sub_3623(v22);
            v3 = *(uint256*)0x40;
            *(uint256*)v3 = 0x4FDD64E500000000000000000000000000000000000000000000000000000000;
            ptr1 = 0xA0;
            v2 = v12;
            v12 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
            uint256 v23 = v2;
            v2 = v11;
            v11 = v3;
            v5 = calldataload(v23 + v2);
            v1 = v11;
            *(int256*)(v1 + 0x4) = address(v5);
            address v24 = v4;
            v4 = (address)v13;
            v13 = (uint256)v24;
            *(int256*)(v11 + 0x24) = v4 & v12;
            uint256 v25 = param0;
            param0 = v11;
            *(uint256*)(v11 + 0x44) = v25;
            v12 = param0;
            v2 = param0;
            v4 = (address)v13;
            v6 = gasleft();
            v3 = v6;
            v7 = staticcall(v3, v4, v12, v2 + 0x64 - v12, param0, v10);
            v10 = param1;
            param1 = v7;
            v11 = 0x1F0A;
            if(param1 == 0x0) {
                v11 = 0xC89;
                sub_C89();
            }
            uint256 v26 = v10;
            v10 = param1;
            param1 = v26;
            v13 = 0x1EDB;
            if(!v10) {
                uint256 v27 = param1;
                param1 = result;
                result = v27;
                param0 = 0x1CCC;
                ptr0 = &param1;
                goto loc_1CCD;
            }
            else {
                v10 = 0x40;
                v7 = returndatasize();
                if(v7 < 0x40) {
                    v7 = returndatasize();
                    v10 = v7;
                }
                /*BAD_CALL!*/ sub_C5D(param0, v10);
                uint256 v28 = v10 + param0;
                v10 = param0;
                param0 = v28;
                if((int256)(param0 - v10) >= 0x40) {
                    ptr0 = &param0;
                    jump 0x1efc;
                }
                ptr0 = &param0;
                revert(0x0, 0x0);
            }
        }

        uint256 v29 = v12;
        v12 = v13;
        v13 = v29;
        param1 = v12;
        v11 = v13 - 0x7;
        v12 = 0x1F39;
        if(!v11) {
            v10 = param1;
            param1 = 0x1F33;
            v13 = 0x21C9;
            /*BAD_CALL!*/ sub_21C9();
            param0 = param2;
            param2 = result;
            v10 = 0x1CCC;
            ptr0 = &param0;
        }
        else {
            uint256 v30 = v13;
            v13 = result;
            result = 0x0;
            uint256 v31 = v13;
            v13 = param1;
            param1 = v31;
            v10 = v13;
            v13 = (uint256)(v30 == 0x8);
            v11 = 0x1F4D;
            if(v13) {
                /*BAD_CALL!*/ sub_3623(v10);
                sub_3768(param2);
                return param1;
            }
            param0 = 0x1CCC;
            ptr0 = &param1;
        }

    loc_1CCD:
        uint256 v32 = ptr0[&loc_2];
        --ptr0;
        ptr0[0] = v32;
        --ptr0;
        ptr0[0] = 0x0;
        --ptr0;
        ptr0[0] = 0x1CF6;
        ++ptr0;
        uint256 v33 = ptr0[0];
        ++ptr0;
        if(!v33) {
            ptr0 += &loc_2;
            v0 = ptr0[0];
            ++ptr0;
            jump v0;
        }

        --ptr0;
        ptr0[0] = 0xA4D;
        ptr0[0] = ptr0[&loc_2];
        ptr0[&loc_2] = 0xA4D;
        --ptr0;
        ptr0[0] = 0x1D02;
        --ptr0;
        ptr0[0] = 0x1C1C;
        ++ptr0;
        ptr0[0] = /*BAD_CALL!*/ sub_1C1C();
        uint256 v34 = ptr0[0];
        ptr0[0] = ptr0[1];
        ptr0[1] = v34;
        --ptr0;
        ptr0[0] = 0x1D0B;
        --ptr0;
        ptr0[0] = 0x1C4E;
        ++ptr0;
        ptr0[0] = /*BAD_CALL!*/ sub_1C4E();
        uint256 v35 = ptr0[0];
        ptr0[0] = ptr0[&loc_2];
        ptr0[&loc_2] = v35;
        --ptr0;
        ptr0[0] = 0x4F28;
        ++ptr0;
        --ptr0;
        ptr0[0] = 0xA4D;
        ptr0[0] = ptr0[&loc_4];
        ptr0[&loc_4] = 0xA4D;
        --ptr0;
        ptr0[0] = 0x4F72;
        --ptr0;
        ptr0[0] = 0x2944;
        ptr0[0] = ptr0[&loc_4];
        ptr0[&loc_4] = 0x2944;
        --ptr0;
        ptr0[0] = 0x4F5B;
        ptr0[0] = ptr0[6];
        ptr0[6] = 0x4F5B;
        --ptr0;
        ptr0[0] = 0x40;
        ptr0[0] = *0x40;
        uint256 v36 = ptr0[0];
        ptr0[0] = ptr0[&loc_7];
        ptr0[&loc_7] = v36;
        uint256 v37 = ptr0[&loc_7];
        --ptr0;
        ptr0[0] = v37;
        uint256 v38 = ptr0[0];
        ptr0[0] = ptr0[6];
        ptr0[6] = v38;
        --ptr0;
        ptr0[0] = 0xA0C4B225;
        --ptr0;
        ptr0[0] = 0xE0;
        ++ptr0;
        ptr0[0] <<= 0xE0;
        --ptr0;
        ptr0[0] = 0x20;
        uint256 v39 = ptr0[&loc_8];
        --ptr0;
        ptr0[0] = v39;
        uint256 v40 = ptr0[0];
        ++ptr0;
        ptr0[0] += v40;
        uint256* ptr2 = ptr0[0];
        ++ptr0;
        *ptr2 = ptr0[0];
        ptr0[0] = 0x80;
        --ptr0;
        ptr0[0] = 0x24;
        uint256 v41 = ptr0[&loc_8];
        --ptr0;
        ptr0[0] = v41;
        uint256 v42 = ptr0[0];
        ++ptr0;
        ptr0[0] += v42;
        uint256* ptr3 = ptr0[0];
        ++ptr0;
        *ptr3 = ptr0[0];
        ptr0[0] = 0xA4;
        uint256 v43 = ptr0[&loc_7];
        --ptr0;
        ptr0[0] = v43;
        uint256 v44 = ptr0[0];
        ++ptr0;
        ptr0[0] += v44;
        uint256 v45 = ptr0[0];
        ptr0[0] = ptr0[1];
        ptr0[1] = v45;
        --ptr0;
        ptr0[0] = 0x13EB;
        ++ptr0;
        ptr0[&loc_2] = /*BAD_CALL!*/ sub_13EB(ptr0[0], ptr0[1]);
        uint256 v46 = ptr0[0];
        ptr0[0] = ptr0[&loc_2];
        ptr0[&loc_2] = v46;
        --ptr0;
        ptr0[0] = 0x44;
        uint256 v47 = ptr0[6];
        --ptr0;
        ptr0[0] = v47;
        uint256 v48 = ptr0[0];
        ++ptr0;
        ptr0[0] += v48;
        uint256* ptr4 = ptr0[0];
        ++ptr0;
        *ptr4 = ptr0[0];
        ptr0[0] = 0x23;
        ptr0[0] = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC;
        uint256 v49 = ptr0[&loc_5];
        --ptr0;
        ptr0[0] = v49;
        uint256 v50 = ptr0[3];
        --ptr0;
        ptr0[0] = v50;
        uint256 v51 = ptr0[0];
        ++ptr0;
        ptr0[0] = v51 - ptr0[0];
        uint256 v52 = ptr0[0];
        ++ptr0;
        ptr0[0] += v52;
        --ptr0;
        ptr0[0] = 0x64;
        uint256 v53 = ptr0[6];
        --ptr0;
        ptr0[0] = v53;
        uint256 v54 = ptr0[0];
        ++ptr0;
        ptr0[0] += v54;
        uint256* ptr5 = ptr0[0];
        ++ptr0;
        *ptr5 = ptr0[0];
        ptr0[0] = 0x13EB;
        ++ptr0;
        ptr0[&loc_2] = /*BAD_CALL!*/ sub_13EB(ptr0[0], ptr0[1]);
        uint256 v55 = ptr0[0];
        ptr0[0] = ptr0[1];
        ptr0[1] = v55;
        --ptr0;
        ptr0[0] = 0x84;
        uint256 v56 = ptr0[3];
        --ptr0;
        ptr0[0] = v56;
        uint256 v57 = ptr0[0];
        ++ptr0;
        ptr0[0] += v57;
        uint256* ptr6 = ptr0[0];
        ++ptr0;
        uint256 v58 = ptr0[0];
        ++ptr0;
        *ptr6 = v58;
        uint256 v59 = ptr0[0];
        ++ptr0;
        ptr0[0] = v59 - ptr0[0];
        --ptr0;
        ptr0[0] = 0x1F;
        ptr0[0] = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0;
        uint256 v60 = ptr0[1];
        --ptr0;
        ptr0[0] = v60;
        uint256 v61 = ptr0[0];
        ++ptr0;
        ptr0[0] += v61;
        uint256 v62 = ptr0[3];
        --ptr0;
        ptr0[0] = v62;
        uint256* ptr7 = ptr0[0];
        ++ptr0;
        v33 = ptr0[0];
        ++ptr0;
        *ptr7 = v33;
        v0 = ptr0[&loc_2];
        --ptr0;
        ptr0[0] = v0;
        --ptr0;
        ptr0[0] = 0xC5D;
        ++ptr0;
        /*BAD_CALL!*/ sub_C5D(ptr0[0], ptr0[1]);
        /*BAD_CALL!*/ sub_3623(v10);
        sub_3768(param2);
        return param1;
    }

    function sub_205A(uint256 param0, uint256 param1, uint256 param2, uint256 param3) private pure returns (uint256) {
        if(param2 != 0x0) {
            /*BAD_CALL!*/ sub_F54();
        }

        return 0x0;
    }

    function sub_2081() {
        // Decompilation error
    }

    function sub_2097(uint256 param0, uint256 param1) private pure returns (uint256) {
        uint256 v0;

        v0 = calldataload(param1);
        *(uint256*)param0 = v0;
        uint256 v1 = sub_A42(param1 + 0x20);
        *(uint256*)(param0 + 0x20) = address(v1);
        return param1;
    }

    function sub_217C() private pure {
        uint256 v0, v1, v2 = v0;

        v0 = v1;
        uint256 v3 = 0x20, v4 = v2;
        *(uint256*)v4 = 0x20;
        sub_2097(v0, v4 + v3);
    }

    function sub_21BF(uint256 param0) private pure returns (uint256) {
        param0 = calldataload(param0);
        /*BAD_CALL!*/ sub_A31(param0);
    }

    function sub_21C9() private pure {
        uint256 v0;

        sub_3732(v0);
    }

    function sub_23F9() {
        // Decompilation error
    }

    function sub_29D1() private pure {
        uint256 v0, v1 = v0;

        v0 = *0x40;
        sub_C27(v0);
        *(uint256*)v0 = 0x11;
        *(int256*)(v0 + 0x20) = 0x61637475616C5472616E73666572466565000000000000000000000000000000;
        jump v1;
    }

    function sub_29FE() private pure {
        uint256 v0, v1, v2, v3 = v0;

        v0 = v2;
        uint256 v4 = 0xFE0, v5 = v3;
        v2 = 0x20;
        uint256 v6 = v0;
        int256* ptr0 = &v1;
        /*BAD_CALL!*/ sub_13C8(v3 + 0x20, v0, *(uint256*)v3);
    }

    function sub_2A11() {
        // Decompilation error
    }

    function sub_2CDC() private pure returns (uint256) {
        uint256 result = *0x40;

        sub_C27(result);
        *(uint256*)result = 0x11;
        *(uint256*)(result + 0x20) = 0x7472616E73666572696E6720746F6B656E000000000000000000000000000000;
        return result;
    }

    function sub_2D09() private pure returns (uint256) {
        uint256 result = *0x40;

        sub_C27(result);
        *(uint256*)result = 0x7;
        *(uint256*)(result + 0x20) = 0x746F20706F6F6C00000000000000000000000000000000000000000000000000;
        return result;
    }

    function sub_2D5E(uint256 param0, uint256 param1, uint256 param2, uint256 param3) private returns (uint256) {
        uint256 v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 = v10;

        v10 = 0x0;
        uint256 v12 = v11;
        v11 = param3;
        param3 = v12;
        uint256 v13 = param2;
        param2 = 0x0;
        uint256 v14 = v13;
        v13 = param0;
        param0 = v14;
        uint256 v15 = 0x0, v16 = 0x2EF1;
        *(int256*)(&v13 - 1) = 0x0;
        *(int256*)(&v13 - 1) = *(int256*)(&v13 + &loc_4);
        *(int256*)(&v13 + &loc_4) = 0x0;
        *(int256*)(&v13 - &loc_2) = 0x2E7C;
        uint256* ptr0 = &v13;
        if(*(int256*)(&v13 - 1)) {
            --ptr0;
            *ptr0 = 0x40;
            *ptr0 = *0x40;
            --ptr0;
            *ptr0 = 0x70A08231;
            --ptr0;
            *ptr0 = 0xE0;
            ++ptr0;
            *ptr0 = *ptr0 << 0xE0;
            uint256 v17 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v17;
            int256* ptr1 = *ptr0;
            ++ptr0;
            *ptr1 = *ptr0;
            *ptr0 = 0x1;
            --ptr0;
            *ptr0 = 0x1;
            --ptr0;
            *ptr0 = 0xA0;
            ++ptr0;
            *ptr0 = *ptr0 << 0xA0;
            uint256 v18 = *ptr0;
            ++ptr0;
            *ptr0 = v18 - *ptr0;
            uint256 v19 = *(int256*)(ptr0 + &loc_5);
            --ptr0;
            *ptr0 = v19;
            uint256 v20 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 & v20;
            --ptr0;
            *ptr0 = 0x4;
            uint256 v21 = *(int256*)(ptr0 + &loc_2);
            --ptr0;
            *ptr0 = v21;
            uint256 v22 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 + v22;
            int256* ptr2 = *ptr0;
            ++ptr0;
            uint256 v23 = *ptr0;
            ++ptr0;
            *ptr2 = v23;
            uint256 v24 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 1);
            *(int256*)(ptr0 + 1) = v24;
            uint256 v25 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + &loc_5);
            *(int256*)(ptr0 + &loc_5) = v25;
            uint256 v26 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + 1);
            *(int256*)(ptr0 + 1) = v26;
            --ptr0;
            *ptr0 = 0x20;
            uint256 v27 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v27;
            uint256 v28 = *ptr0;
            --ptr0;
            --ptr0;
            *ptr0 = 0x24;
            uint256 v29 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v29;
            uint256 v30 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 + v30;
            uint256 v31 = *ptr0;
            ++ptr0;
            *ptr0 = v31 - *ptr0;
            uint256 v32 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v32;
            --ptr0;
            *ptr0 = 0x1;
            --ptr0;
            *ptr0 = 0x1;
            --ptr0;
            *ptr0 = 0xA0;
            ++ptr0;
            *ptr0 = *ptr0 << 0xA0;
            uint256 v33 = *ptr0;
            ++ptr0;
            *ptr0 = v33 - *ptr0;
            uint256 v34 = *(int256*)(ptr0 + &loc_A);
            --ptr0;
            *ptr0 = v34;
            uint256 v35 = *ptr0;
            ++ptr0;
            *ptr0 = *ptr0 & v35;
            v5 = gasleft();
            --ptr0;
            *ptr0 = v5;
            uint256 v36 = *ptr0;
            ++ptr0;
            address v37 = *ptr0;
            ++ptr0;
            v3 = *ptr0;
            ++ptr0;
            v2 = *ptr0;
            ++ptr0;
            v1 = *ptr0;
            ++ptr0;
            v6 = staticcall(v36, v37, v3, v2, v1, *ptr0);
            *ptr0 = v6;
            uint256 v38 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + &loc_2);
            *(int256*)(ptr0 + &loc_2) = v38;
            uint256 v39 = *(int256*)(ptr0 + &loc_2);
            --ptr0;
            *ptr0 = v39;
            *ptr0 = (uint256)(*ptr0 == 0x0);
            --ptr0;
            *ptr0 = 0x2EE4;
            ++ptr0;
            uint256 v40 = *ptr0;
            ++ptr0;
            if(v40) {
                --ptr0;
                *ptr0 = 0x2EEC;
                --ptr0;
                *ptr0 = 0xC89;
                ++ptr0;
                /*BAD_CALL!*/ sub_C89();
                --ptr0;
                *ptr0 = 0x2EB9;
                ++ptr0;
            }
            uint256 v41 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + &loc_2);
            *(int256*)(ptr0 + &loc_2) = v41;
            --ptr0;
            *ptr0 = 0x2EC6;
            ++ptr0;
            uint256 v42 = *ptr0;
            ++ptr0;
            if(!v42) {
                goto loc_2EC0;
            }
            else {
                --ptr0;
                *ptr0 = 0x2EDE;
                *ptr0 = *(int256*)(ptr0 + &loc_2);
                *(int256*)(ptr0 + &loc_2) = 0x2EDE;
                *ptr0 = 0x20;
                v7 = returndatasize();
                --ptr0;
                *ptr0 = v7;
                uint256 v43 = *(int256*)(ptr0 + 1);
                --ptr0;
                *ptr0 = v43;
                uint256 v44 = *ptr0;
                ++ptr0;
                *ptr0 = (uint256)(*ptr0 < v44);
                --ptr0;
                *ptr0 = 0x77A;
                ++ptr0;
                v0 = *ptr0;
                ++ptr0;
            }
            if(v0) {
                v9 = returndatasize();
                *ptr0 = v9;
                --ptr0;
                *ptr0 = 0x762;
                ++ptr0;
                --ptr0;
                *ptr0 = 0x76C;
                uint256 v45 = *(int256*)(ptr0 + 1);
                --ptr0;
                *ptr0 = v45;
                uint256 v46 = *(int256*)(ptr0 + 3);
                --ptr0;
                *ptr0 = v46;
                --ptr0;
                *ptr0 = 0xC5D;
                ++ptr0;
                /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
                uint256 v47 = *(int256*)(ptr0 + 1);
                --ptr0;
                *ptr0 = v47;
                uint256 v48 = *ptr0;
                ++ptr0;
                *ptr0 = *ptr0 + v48;
                uint256 v49 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + 1);
                *(int256*)(ptr0 + 1) = v49;
                --ptr0;
                *ptr0 = 0xC96;
                ++ptr0;
            loc_C97:
                uint256 v50 = *ptr0;
                *ptr0 = *(int256*)(ptr0 + 1);
                *(int256*)(ptr0 + 1) = v50;
                uint256 v51 = *(int256*)(ptr0 + 1);
                --ptr0;
                *ptr0 = v51;
                --ptr0;
                *ptr0 = 0x20;
                *ptr0 = *(int256*)(ptr0 + &loc_2);
                *(int256*)(ptr0 + &loc_2) = 0x20;
                uint256 v52 = *ptr0;
                ++ptr0;
                *ptr0 = v52 - *ptr0;
                uint256 v53 = *ptr0;
                ++ptr0;
                *ptr0 = (uint256)(*ptr0 > v53);
                --ptr0;
                *ptr0 = 0x29;
                ++ptr0;
                uint256 v54 = *ptr0;
                ++ptr0;
                if(!v54) {
                    *ptr0 = **ptr0;
                    uint256 v55 = *ptr0;
                    *ptr0 = *(int256*)(ptr0 + 1);
                    *(int256*)(ptr0 + 1) = v55;
                    v53 = *ptr0;
                    ++ptr0;
                    jump v53;
                }
                --ptr0;
                *ptr0 = 0x0;
                --ptr0;
                *ptr0 = 0x0;
                ++ptr0;
                v54 = *ptr0;
                ++ptr0;
                revert(0x0, v54);
                return;
            }
            --ptr0;
            *ptr0 = 0x76C;
            uint256 v56 = *(int256*)(ptr0 + 1);
            --ptr0;
            *ptr0 = v56;
            uint256 v57 = *(int256*)(ptr0 + 3);
            --ptr0;
            *ptr0 = v57;
            --ptr0;
            *ptr0 = 0xC5D;
            ++ptr0;
            /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
            v8 = codesize();
            --ptr0;
            *ptr0 = v8;
            --ptr0;
            *ptr0 = 0x2EBF;
            ++ptr0;
        loc_2EC0:
            ++ptr0;
            uint256 v58 = *ptr0;
            *ptr0 = *(int256*)(ptr0 + &loc_4);
            *(int256*)(ptr0 + &loc_4) = v58;
            --ptr0;
            *ptr0 = 0x2D92;
            ++ptr0;
        }

        --ptr0;
        *ptr0 = 0x2DE1;
        --ptr0;
        *ptr0 = 0x0;
        --ptr0;
        *ptr0 = 0x0;
        --ptr0;
        *ptr0 = 0x2DA0;
        --ptr0;
        *ptr0 = 0xE8F;
        ++ptr0;
        *ptr0 = /*BAD_CALL!*/ sub_E8F();
        --ptr0;
        *ptr0 = 0x40;
        *ptr0 = *0x40;
        --ptr0;
        *ptr0 = 0x20;
        uint256 v59 = *(int256*)(ptr0 + 1);
        --ptr0;
        *ptr0 = v59;
        uint256 v60 = *ptr0;
        ++ptr0;
        *ptr0 = *ptr0 + v60;
        uint256 v61 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + &loc_2);
        *(int256*)(ptr0 + &loc_2) = v61;
        uint256 v62 = *(int256*)(ptr0 + &loc_2);
        --ptr0;
        *ptr0 = v62;
        int256* ptr3 = *ptr0;
        ++ptr0;
        *ptr3 = *ptr0;
        *ptr0 = 0x1;
        --ptr0;
        *ptr0 = 0x1;
        --ptr0;
        *ptr0 = 0xA0;
        ++ptr0;
        *ptr0 = *ptr0 << 0xA0;
        uint256 v63 = *ptr0;
        ++ptr0;
        *ptr0 = v63 - *ptr0;
        uint256 v64 = *(int256*)(ptr0 + &loc_9);
        --ptr0;
        *ptr0 = v64;
        uint256 v65 = *ptr0;
        ++ptr0;
        *ptr0 = *ptr0 & v65;
        --ptr0;
        *ptr0 = 0x24;
        uint256 v66 = *(int256*)(ptr0 + &loc_2);
        --ptr0;
        *ptr0 = v66;
        uint256 v67 = *ptr0;
        ++ptr0;
        *ptr0 = *ptr0 + v67;
        int256* ptr4 = *ptr0;
        ++ptr0;
        *ptr4 = *ptr0;
        *ptr0 = 0x44;
        uint256 v68 = *(int256*)(ptr0 + 1);
        --ptr0;
        *ptr0 = v68;
        uint256 v69 = *ptr0;
        ++ptr0;
        *ptr0 = *ptr0 + v69;
        uint256 v70 = *(int256*)(ptr0 + &loc_8);
        --ptr0;
        *ptr0 = v70;
        uint256 v71 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + 1);
        *(int256*)(ptr0 + 1) = v71;
        int256* ptr5 = *ptr0;
        ++ptr0;
        *ptr5 = *ptr0;
        *ptr0 = 0x2DCD;
        uint256 v72 = *(int256*)(ptr0 + 1);
        --ptr0;
        *ptr0 = v72;
        --ptr0;
        *ptr0 = 0x64;
        uint256 v73 = *(int256*)(ptr0 + 1);
        --ptr0;
        *ptr0 = v73;
        uint256 v74 = *ptr0;
        ++ptr0;
        *ptr0 = *ptr0 + v74;
        --ptr0;
        *ptr0 = 0xB58;
        ++ptr0;
        uint256 v75 = *ptr0;
        ++ptr0;
        *ptr0 = v75 - *ptr0;
        --ptr0;
        *ptr0 = 0x1F;
        *ptr0 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0;
        uint256 v76 = *(int256*)(ptr0 + 1);
        --ptr0;
        *ptr0 = v76;
        uint256 v77 = *ptr0;
        ++ptr0;
        *ptr0 = *ptr0 + v77;
        uint256 v78 = *(int256*)(ptr0 + 3);
        --ptr0;
        *ptr0 = v78;
        int256* ptr6 = *ptr0;
        ++ptr0;
        uint256 v79 = *ptr0;
        ++ptr0;
        *ptr6 = v79;
        uint256 v80 = *(int256*)(ptr0 + &loc_2);
        --ptr0;
        *ptr0 = v80;
        --ptr0;
        *ptr0 = 0xC5D;
        ++ptr0;
        /*BAD_CALL!*/ sub_C5D(*ptr0, *(ptr0 + 1));
        *ptr0 = **ptr0;
        uint256 v81 = *ptr0;
        *ptr0 = *(int256*)(ptr0 + 3);
        *(int256*)(ptr0 + 3) = v81;
        v4 = gasleft();
        --ptr0;
        *ptr0 = v4;
        uint256 v82 = *ptr0;
        ++ptr0;
        address v83 = *ptr0;
        ++ptr0;
        v3 = *ptr0;
        ++ptr0;
        v2 = *ptr0;
        ++ptr0;
        v1 = *ptr0;
        ++ptr0;
        uint256 v84 = *ptr0;
        ++ptr0;
        v9 = call(v82, v83, v3, v2, v1, v84, *ptr0);
        *ptr0 = v9;
        *ptr0 = 0x2E;
        --ptr0;
        *ptr0 = 0xE5F;
        ++ptr0;
        *ptr0 = /*BAD_CALL!*/ sub_E5F();
        goto loc_C97;
    }

    function sub_2F11() private pure returns (uint256) {
        uint256 v0;
        uint256 result = *0x40;

        sub_C42(result);
        *(uint256*)result = 0x2;
        v0 = v1.length;
        calldatacopy(result + 0x20, v0, 0x40);
        return result;
    }

    function sub_301D() {
        // Decompilation error
    }

    function sub_322C() {
        // Decompilation error
    }

    function sub_360E(uint256 param0, uint256 param1) private pure returns (uint256) {
        uint256 v0;

        if((int256)(param0 - param1) >= 0x20) {
            v0 = calldataload(v0);
            /*BAD_CALL!*/ sub_A31(0x144C);
        }

        revert(0x0, 0x0);
    }

    function sub_3623() {
        // Decompilation error
    }

    function sub_3664() {
        // Decompilation error
    }

    function sub_3696() {
        // Decompilation error
    }

    function sub_36C8() {
        // Decompilation error
    }

    function sub_36FD() private pure {
        uint256 v0;

        sub_3664(v0, v0 + 0xA0);
    }

    function sub_3732() {
        // Decompilation error
    }

    function sub_3768() {
        // Decompilation error
    }

    function sub_379D() {
        // Decompilation error
    }

    function sub_3913() private pure returns (uint256) {
        uint256 v0 = *0x40;

        sub_C42(v0);
        *(uint256*)v0 = 0x23;
        *(uint256*)(v0 + 0x20) = 0x737761702875696E743235362C75696E743235362C616464726573732C627974;
        *(int256*)(v0 + 0x40) = 0x6573290000000000000000000000000000000000000000000000000000000000;
        return 0x22C0D9F00000000000000000000000000000000000000000000000000000000;
    }

    function sub_3961() private pure returns (uint256) {
        int256* ptr0;
        int256* ptr1 = *0x40;

        if((int256*)((int256)(int256*)(ptr1 + 1 < ptr1) | (int256)(int256*)((uint256)(ptr1 + 1) > 0xFFFFFFFFFFFFFFFF))) {
            sub_BF0();
        }

        *0x40 = ptr1 + 1;
        *ptr1 = 0x0;
        ptr0 = v0.length;
        calldatacopy(0x0, ptr0, 0x0);
        return (uint256)ptr1;
    }

    function sub_3997() {
        // Decompilation error
    }

    function sub_39C9(uint256 param0, uint256 param1, uint256 param2, uint256 param3, uint256 param4) private pure returns (uint256) {
        *(uint256*)param4 = param3;
        *(uint256*)(param4 + 0x20) = param2;
        *(uint256*)(param4 + 0x40) = address(param1);
        *(int256*)(param4 + 0x60) = 0x80;
        /*BAD_CALL!*/ sub_13EB(param0, param4 + 0x80);
    }

    function sub_39F4() private pure returns (uint256) {
        uint256 v0 = *0x40;

        sub_C27(v0);
        *(uint256*)v0 = 0x1D;
        *(int256*)(v0 + 0x20) = 0x737761702875696E743235362C75696E743235362C6164647265737329000000;
        return 0x6D9A640A00000000000000000000000000000000000000000000000000000000;
    }

    function sub_3A34() {
        // Decompilation error
    }

    function sub_3A66(uint256 param0, uint256 param1, uint256 param2, address param3) private returns (uint256) {
        uint256 v0, v1, v2, v3, v4;
        address v5 = param3;

        param3 = (address)param2;
        uint256 v6 = sub_36C8((uint256)v5);
        v0 = calldataload((uint256)(v5 + 0x60));
        uint256 v7 = (uint256)(v0 == 0x0);
        (v1, v2) = sub_109B(v6, v7);
        uint256 v8 = sub_DAF(param1, v1);
        address v9 = (address)sub_3696((uint256)v5);
        uint256 v10 = sub_205A(v8, v1, v2, (uint256)v9);
        uint256 v11 = sub_3913();
        v1 = 0x3C21;
        if(v7 == 0x0) {
            v9 = param3;
            param3 = 0x0;
        }
        else {
            v9 = 0x0;
            v1 = v11;
            v11 = 0x0;
        }

        v2 = (uint256)v9;
        if(v7 == v9) {
            uint256 v12 = v2;
            v2 = v11;
            v11 = v12;
        }
        else {
            v1 = (uint256)param3;
        }

        address v13 = (address)sub_3961();
        uint256 v14 = v11;
        v11 = *0x40;
        *(uint256*)(v11 + 0x20) = v1;
        uint256 v15 = sub_39C9(v11 + 0x24, v2, v14, param0, (uint256)v13);
        uint256 v16 = v15 - v11;
        *(uint256*)v11 = v16 - 0x20;
        sub_C5D(v11, v16);
        v4 = gasleft();
        v0 = call(v4, v6, v9, v11 + 0x20, *(uint256*)v11, v9, 0x0);
        sub_E5F();
        if(v0 == 0x0) {
            v0 = 0x0;
            v2 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0;
            v15 = v10;
            uint256 v17 = sub_39F4();
            if(v7 == 0x0) {
                v15 = (uint256)0x0;
            }
            else {
                v2 = 0x0;
                v0 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0;
            }
            v13 = *(address*)0x40;
            *(uint256*)(uint256)(v13 + 0x20) = v17;
            *(address*)(uint256)(v13 + 0x24) = (address)v15;
            *(uint256*)(v13 + 0x44) = 0x0;
            *(uint256*)(v13 + 0x64) = address(param0);
            *(uint256*)v13 = v2 + 0x84;
            sub_C5D((uint256)v13, 0x84);
            v1 = gasleft();
            v3 = call(v1, v6, v0, (uint256)(v13 + 0x20), *(address*)v13, 0x0, 0x0);
            sub_E5F();
            sub_3A34(v3);
            v11 = codesize();
        }

        uint256 v18 = *0x40;
        *(uint256*)v18 = 0x70A0823100000000000000000000000000000000000000000000000000000000;
        *(uint256*)(v18 + 0x4) = address(param0);
        return v18 + 0x24;
    }

    function sub_3C2B() private pure {
        uint256 v0, v1, v2 = v0;

        v0 = v1;
        uint256 v3 = 0x20, v4 = v2;
        *(uint256*)v4 = 0x20;
        sub_13EB(v0, v4 + v3);
    }

    function sub_3DB3() private pure {
    }

    function sub_3ED6() private pure returns (uint256) {
        int256* ptr0 = *0x40;

        if((int256*)((int256)(int256*)(ptr0 + &loc_4 < ptr0) | (int256)(int256*)((uint256)(ptr0 + &loc_4) > 0xFFFFFFFFFFFFFFFF))) {
            sub_BF0();
        }

        *0x40 = ptr0 + &loc_4;
        *ptr0 = 0x60;
        *(ptr0 + 1) = 0x737761704578616374546F6B656E73466F72546F6B656E73537570706F727469;
        *(ptr0 + &loc_2) = 0x6E674665654F6E5472616E73666572546F6B656E732875696E743235362C7569;
        *(ptr0 + 3) = 0x6E743235362C616464726573735B5D2C616464726573732C75696E7432353629;
        return 0x5C11D79500000000000000000000000000000000000000000000000000000000;
    }

    function sub_3FDC(uint256 param0, uint256 param1, uint256 param2, uint256 param3) private view returns (uint256) {
        uint256 v0;
        uint256 v1 = sub_3623(param3);
        uint256 v2 = sub_2F11();
        uint256 v3 = sub_21BF(param3 + 0x20);

        sub_1254(v2, 0x3092, v3);
        sub_126A(v2, 0x3092, param2);
        v1 = sub_3ED6();
        uint256 v4 = *0x40;
        *(uint256*)(v4 + 0x20) = v1;
        v0 = timestamp();
        *(uint256*)(v4 + 0x24) = param0;
        *(uint256*)(v4 + 0x44) = 0x0;
        *(uint256*)(v4 + 0x64) = 0xA0;
        uint256 max = *(uint256*)v2;
        *(uint256*)(v4 + 0xC4) = *(uint256*)v2;
        uint256 v5 = v4 + 0xE4;
        uint256 v6 = v2 + 0x20;
        for(uint256 i = 0x0; i < max; ++i) {
            *(uint256*)v5 = address(*(uint256*)v6);
            v5 += 0x20;
            v6 += 0x20;
        }

        return 0x3009;
    }

    function sub_40D4(uint256* param0, uint256* param1, uint256* param2) private pure returns (uint256) {
        *param2 = param1;
        *(param2 + 1) = 0x40;
        uint256* max = *param0;
        *(param2 + &loc_2) = *param0;
        param1 = param2 + 3;
        param2 = param0 + 1;
        for(uint256* i = 0x0; i < max; i = (uint256*)((char*)i + 0x1)) {
            *param1 = (uint256*)(address((int256)*param2));
            ++param1;
            ++param2;
        }

        return 0x144C;
    }

    function sub_40EB() {
        // Decompilation error
    }

    function sub_4367() private pure {
        uint256 v0, v1, v2, v3, v4, v5, v6 = v1;

        v1 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
        *(int256**)v0 = (int256*)(address(v6));
        uint256 v7 = v0;
        v0 = v2;
        v2 = v7;
        *(int256*)(v2 + 0x20) = (uint256)(v0 != 0x0);
        uint256 v8 = v3;
        v3 = v1;
        *(uint256*)(v2 + 0x40) = v8;
        uint256 v9 = v2;
        v2 = v4;
        v4 = v9;
        *(uint256*)(v4 + 0x60) = (int256*)(v2 & v3);
        v3 = 0xA0;
        *(uint256*)(v4 + 0x80) = 0xA0;
        v5 = /*BAD_CALL!*/ sub_13EB(v5, v3 + v4);
    }

    function sub_43A0() private pure {
        uint256 v0, v1;

        v1 = calldataload(v0 + 0x60);
        sub_3623(v0);
    }

    function sub_47B2() private pure returns (uint256) {
        uint256 v0 = *0x40;

        sub_C42(v0);
        *(uint256*)v0 = 0x34;
        *(uint256*)(v0 + 0x20) = 0x65786368616E676528696E743132382C696E743132382C75696E743235362C75;
        *(int256*)(v0 + 0x40) = 0x696E743235362C626F6F6C2C6164647265737329000000000000000000000000;
        return 0x2F7865A800000000000000000000000000000000000000000000000000000000;
    }

    function sub_48EB() private pure returns (uint256) {
        uint256 v0 = *0x40;

        sub_C42(v0);
        *(uint256*)v0 = 0x2F;
        *(uint256*)(v0 + 0x20) = 0x65786368616E676528696E743132382C696E743132382C75696E743235362C75;
        *(int256*)(v0 + 0x40) = 0x696E743235362C61646472657373290000000000000000000000000000000000;
        return 0xDDC1F59D00000000000000000000000000000000000000000000000000000000;
    }

    function sub_4A18() private pure returns (uint256) {
        uint256 v0 = *0x40;

        sub_C42(v0);
        *(uint256*)v0 = 0x35;
        *(uint256*)(v0 + 0x20) = 0x7377617028616464726573732C616464726573732C75696E743235362C75696E;
        *(int256*)(v0 + 0x40) = 0x743235362C616464726573732C75696E74323536290000000000000000000000;
        return 0x9908FC8B00000000000000000000000000000000000000000000000000000000;
    }

    function sub_4B9D() {
        // Decompilation error
    }

    function sub_4CE0() {
        // Decompilation error
    }

    function sub_4D80() {
        // Decompilation error
    }

    function sub_4D91() {
        // Decompilation error
    }

    function sub_4E16(uint256 param0) private {
        uint256 v0 = *0x40;

        *(uint256*)(v0 + 0x20) = 0x41304FAC00000000000000000000000000000000000000000000000000000000;
        *(uint256*)(v0 + 0x24) = 0x20;
        /*BAD_CALL!*/ sub_13EB(param0, v0 + 0x44);
    }

    function sub_4E44(uint256* param0) private view {
        uint256 v0;

        v0 = gasleft();
        staticcall(v0, 0x636F6E736F6C652E6C6F67, (int256*)(param0 + 1), *param0, 0x0, 0x0);
    }

    function sub_4E5F(uint256 param0) private pure {
        uint256 v0 = *0x40;

        *(uint256*)(v0 + 0x20) = 0x9710A9D000000000000000000000000000000000000000000000000000000000;
        *(uint256*)(v0 + 0x24) = 0x40;
        uint256 v1 = sub_13EB(param0, v0 + 0x64);
        *(int256*)(v0 + 0x44) = 0x0;
        uint256 v2 = v1 - v0;
        *(uint256*)v0 = v2 - 0x20;
        /*BAD_CALL!*/ sub_C5D(v0, v2);
    }

    function sub_4EA2(uint256 param0) private pure {
        uint256 v0 = *0x40;

        *(uint256*)(v0 + 0x20) = 0x9710A9D000000000000000000000000000000000000000000000000000000000;
        *(uint256*)(v0 + 0x24) = 0x40;
        uint256 v1 = sub_13EB(param0, v0 + 0x64);
        *(int256*)(v0 + 0x44) = 0x1;
        uint256 v2 = v1 - v0;
        *(uint256*)v0 = v2 - 0x20;
        /*BAD_CALL!*/ sub_C5D(v0, v2);
    }

    function sub_4EE5(uint256 param0, uint256 param1) private view {
        uint256 v0, v1 = 0x2944, v2 = param0;

        param0 = *0x40;
        uint256 v3 = v2;
        v2 = param0;
        *(int256*)(v2 + 0x20) = 0x9710A9D000000000000000000000000000000000000000000000000000000000;
        *(int256*)(v2 + 0x24) = 0x40;
        /*BAD_CALL!*/ sub_13EB(v3, v2 + 0x64);
        uint256 v4 = v2;
        v2 = v1;
        v1 = v4;
        *(uint256*)(param0 + 0x44) = v2;
        param0 = v1 - param0;
        *(uint256*)v0 = param0 - 0x20;
        sub_C5D(v0, param0);
    }

    function sub_4F86(uint256 param0, uint256 param1, uint256 param2, uint256 param3) private pure {
        uint256 v0 = param1;

        param1 = *0x40;
        *(uint256*)(param1 + 0x20) = 0xAABC9A3100000000000000000000000000000000000000000000000000000000;
        *(uint256*)(param1 + 0x24) = 0x80;
        uint256 v1 = sub_13EB(param3, param1 + 0xA4);
        *(uint256*)(param1 + 0x44) = address(param2);
        *(uint256*)(param1 + 0x64) = v1 - param1 - 0x24;
        uint256 v2 = sub_13EB(v0, v1);
        *(uint256*)(param1 + 0x84) = address(param0);
        param3 = v2 - param1;
        *(uint256*)param1 = param3 - 0x20;
        /*BAD_CALL!*/ sub_C5D(param1, param3);
        invalid();
    }

}
